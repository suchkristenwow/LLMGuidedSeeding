I want to make a 2D BEV plot to simulate an autonomous agent executing a task where the robot has to navigate with respect to *INSERT_OBJECT*. 

Consider what shape and size the object is. For example, a desk might be represented by a rectangle, with a size of 1m x 0.5 m. 

Be sure to also consider that this is a 2D BEV plot, so consider what the object would look like viewed from the top.

For example, a tire should also be represented by a rectangle since that is its footprint when viewed from the top. 

Finally, given you have determined the best shape, can you write a few lines of code to initialize a few of those shapes as shapely.Polygon objects within the given plot bounds? 

The plot bounds are given as a nx2 np array describing the contour. Note that the first and last coordinate of plot_bounds is the same (as this is a requirement for making Polygon objects using the 
shapely library). The plot_bounds describe an arbitrary shape drawn by the user. If you want to iterate over the bounds (to navigate using a pattern, for example) you should use the shapely library to operate over the contour. 

In my simulation I have already initialized the number of the *INSERT_OBJECT*. I have saved this number in the n_obstacles variable (which is int type).

Your response will be executed like this: 

exec(code,'plot_bounds': self.plot_bounds, 'n_obstacles': self.n_obstacles, local_scope)
That is, you have access to the plot_bounds variable and the n_obstacles variable. 

Remember that are operating autonomously so you cannot call any functions or classes that haven't already been named and expect the user to implement them on their own.  

I have included a list of helpful packages you should import: 
*INSERT_IMPORTS*

You can use this function to generate random points inside the plot boundaries. 

def gen_random_points_in_plot_bounds(plot_bounds,num_points): 
    ""
    Args: 
        plot_bounds (shapely.Polygon) : Describes the boundaries of the plot
        num_points (int) : # of random points desired 
    Returns:
        rand_points (np.ndarray) : nx2 nd array of random points inside the plot bounds 
    """

I have also written a function that ensures the new object doesn't intersect with any of the existing landmarks 

def check_overlap_w_existing_lms(shape,existing_landmarks):
    """
    Args: 
        shape (shapely.Polygon) : Describes the shape in question 
        existing_landmarks (list) : List of existing landmarks (shapely.Polygon objects) 
    Returns:
        overlap (bool) : Returns True if there is overlap (invalid object), and False otherwise 
    """

For example, if the best shape is circle, and the user has specified that the object in question is 30 cm across and that they are usually are found in clusters then a good response would be: 

*INSERT_IMPORTS* 

n_clusters = random.randint(1,num_points/2) #there should be at least two objects per cluster

avg_points_cluster = int(num_points/n_clusters)

cluster_centers = gen_random_points_in_plot_bounds(plot_bounds,n_clusters)

obj_count = 0

obstacles = []

def gen_rand_object_center (radii): 
    angle = random.uniform(0, 2 * np.pi)
    distance = random.uniform(0, radii * 2)  # Ensure circles do not overlap within the cluster
    x_offset = np.cos(angle) * distance
    y_offset = np.sin(angle) * distance
    
    circle_center = Point(cluster_center.x + x_offset, cluster_center.y + y_offset) 

    return circle_center

for i in range(n_clusters):
    cluster_center = cluster_centers[i,:]
    if i == n_clusters - 1:
        #want to add the remaining points to the cluster 
        points_cluster = num_points - obj_count 
    else:
        points_cluster = avg_points_cluster  
        # Generate a random point within a certain distance (0.3 m) from the cluster center
        circle_center = gen_rand_object_center(0.3) 
        # Approximate a circle
        angles = np.linspace(0, 2 * np.pi, num_vertices, endpoint=False)
        points = [(circle_center.x + np.cos(angle) * radius, circle_center.y + np.sin(angle) * radius) for angle in angles]  
        
        # Ensure the circle is within the polygon
        if polygon.contains(circle_center):
            if check_overlap_w_existing_lms(Polygon(points)):
                overlap = check_overlap_w_existing_lms(Polygon(points))
                while overlap: 
                    circle_center = gen_rand_object_center(0.3) 
                    angles = np.linspace(0, 2 * np.pi, num_vertices, endpoint=False)
                    points = [(circle_center.x + np.cos(angle) * radius, circle_center.y + np.sin(angle) * radius) for angle in angles]  
            
            obstacles.append(Polygon(points))  

Make sure that the output of your code is a list of shapely Polygon objects saved under the variable name 'obstacles'. 
BE SURE TO SAVE THE SHAPES YOU COME UP WITH AS obstacles SO I CAN ACCESS IT FROM THE MAIN SCRIPT! 