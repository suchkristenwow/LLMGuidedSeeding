You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. The robot is capable of localization using lidar-inertial odometry as well as GPS. 
Whenever there is some uncertainty, you can interface with the human for more direction or context. 

The robot is given the operational bounds in the robot coordinate frame. This variable is called "plot_bounds". The plot bounds are given as a nx2 np array describing the
contour. It is important that the robot operate inside the bounds and never plan to drive outside of the plot bounds. If the robot begins outside of the plot bounds, the 
first step should be to plan the shortest route possible to be inside the bounds.

In addition to a user-given prompt, I also have a dictionary of important constraints. 

The entry under the key "avoid" is a list of objects the user wishes the robot to avoid. The entry under the key "goal_lms" are objects the user wishes the robot to find 
and navigate towards. The entry under "pattern" is a string defining the desired pattern in which the robot should drive to execute the task. The entry under "seed" is 
a boolean variable indicating if the user wants the robot to seed as part of the policy or not. Finally, the entry under "pattern_offset" is a float variable indicating 
any relevant offset to completing the task. For example if the user says "Plant 10 cm away from any shrubs in the plot", the "pattern_offset" would be 0.1. The entry under the key
"failure_label" are the ground objects that robot tried to plant the seed but failed, make sure the robot aviod those objects. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", the constraint dictionary would be {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. 
Or, if the prompt was "Seed along the fenceline in a straight row, 15 cm apart", the constraint dicrionary would be  {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would have the constraint dictionary {"search":"shrubs","seed":"False"}.

Given the following prompt and the constraint dictionary, write a step by step policy which would accomplish the given task. Enumerate each of the steps like 1. Do foo, 2. Look for bar ...

If the "plant" boolean is True, be sure to maintain a list in the system memory of all the planted locations.

You can assume that the robot is on, and the plot bounds and constraints are already loaded into the system memory. 


constraint_dictionary: *INSERT_CONSTRAINTS*

Note that for any objects listed under "avoid" or "failure_label", each time such an object is detected, the corresponding vertex in the planner graph is removed. That is, 
you can safely exclude those from the policy. 

The original policy is :"*INSERT_ORIGINAL_STEPS*" 

The robot has exected some policy steps and now the unexected steps are: "*INSERT_UNEXECUTED_STEPS*".

Please generate a new policy to execte the rest of the unexected steps considering the new constraints "failure_label". Be sure to give your response in the form of a numbered list so I can easily parse your response.

Prompt: *INSERT_QUERY*

