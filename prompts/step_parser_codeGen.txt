You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded rangelands.

This is the prompt: *INSERT_QUERY*

The robot is a Cleapath Husky outfitted with lidar, IMU, and RGB cameras, as well as a planter mechanism to plant seeds.

In terms of localization, the robot is capable of localization using lidar-inertial odometry as well as GPS. 

The policy has been parsed like so: *INSERT_CONSTRAINT_DICT*

The keys to this dictionary should be the strings "meta-obstacle", "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

A meta-obstacle is an obstacle created by the platform itself. For example, if the prompt includes a command to avoid driving over areas where you've already driven, you should include 
{"meta-obstacle":"already driven"}. Another example would be if the prompt includes a command like "Avoid driving over areas where you have already planted", you should include
{"meta-obstacle":"planted areas"}. 

Note that for any objects listed under "avoid", each time such an object is detected, the corresponding vertex in the planner graph is removed. That is, 
you can safely ignore those in your policy execution.

To execute the desired task, the ecologist has written you this list of steps:
*INSERT_POLICY*

Please write some Python code that would execute this policy. 

Here is an API which you can use to control the robot.

Before calling a control input such as go_to_waypoint, start_volumetric_gain_exploration, or plant you should check if the robot is available by calling is_available() 
and wait until that is true to ensure safety. 

Use only these functions and those defined in standard python libraries or the math library. 

Your code will be executed on the robot such that the following class definitions and functions are within the local scope.

Consider adding stopping conditions if necessary to prevent exploring indefinitely. Also consider that the object detector is imperfect and can miss detections of landmarks.

For ease of parsing please put >>> right before your code, and <<< at the end of your code. 
>>> API Definition 
    class Point:
    """
    Represents a point with X, Y, Z coordinates.
    """

    def __init__(self, x: flaot, y: float, z: float):
        self.x = x
        self.y = y
        self.z = z
 
    class ObjectPoint:
    """
    Represents a object point with a Point and a timestamp, and a label
    """

    def __init__(self, time: flaoat, point: Point, label: str, confidence: float, visited: bool):
        self.time = time
        self.label = label
        self.confidence = confidence
        self.point = point
        self.visited = visited 

    class RobotPose:
    """
    Represents a robot pose with a Point and a timestamp, and yaw (in degrees)
    """

    def __init__(self, time: float, point: Point, yaw: float):
        self.time = time
        self.point = point
        self.yaw = yaw 

    def is_available() -> Bool:
        """
        Checks if the robot is currently executing a protocol. You should wait for this to be true before calling other control functions.
        """ 

    def get_position() -> RobotPose:
        """
        Retrieves the current coordinates of the robot.
        Returns: RobotPose
        """

    def get_all_objects() -> dict:
        """
        This returns a dictionary of all the observed landmarks from the constraint dictionary which have been localized.
        This is what the object dictionary looks like: 

        Note that the object detector will only detect objects listed in the constraint dictionary. 

        all_objects[index] = {
                    "name": label, #str type 
                    "seq": detection_sequence, #int type 
                    "time": timestamp_in_seconds, #int type 
                    "confidence": detection_confidence, #float type 
                    "position": {
                        "x": detection_position_x, #float type 
                        "y": detection_position_y, #float type 
                        "z": detection_position_z, #float type 
                    }

        """
    
    def get_contour_pts(ObjectPoint) -> Point[]:
        """
        Computes the contour of an object from its instance segmentation mask, 
        projects the contour points into the world frame, and identifies which of those points lie on the ground.

        This function takes in a point representing the object and uses the instance segmentation mask 
        associated with the object to extract its contour. The extracted contour is then transformed 
        from the image or camera frame into the world frame. Each projected point is checked against the 
        ground plane to determine if it is on the ground. 

        Use when avoiding objects or targeting certain ground conditions. For example in the prompt: "Plant in the grass",
        you should call this function to get the contours of the grass area. 

        Args:
            ObjectPoint: The input object point, typically a 3D coordinate or a representative feature 
                        of the object in question.

        Returns:
            Point[]: A list of 3D points in the world frame that define the contour of the object 
                        and are verified to lie on the ground plane. Returns an empty list if no points 
                        are found to lie on the ground.
        """

    def get_camera_fov() -> Point[]:
        """
        Returns a list of 4 (x,y) Points of the field of view of the cameras. Can help keep track of what areas are observed. 
        """ 

    def check_waypoint_in_bounds(pt: Point) -> Bool:
        """
        Checks if a given waypoint is within the specified bounds 
        """ 

    def get_waypoint_closest_to_object(op: ObjectPoint) -> Point:
        """
        Finds the closest unoccupied waypoint  to the desired object. 

        Returns: Point: the closest unoccupied waypoint to the desired object. 
        """ 

    def check_target_object(object_label: str, distance_threshold: float):
        """
        Checks if the targeted object has been detected and returns its position
        if it hasn't been visited before and is within a certain distance threshold.

        Returns list of Point if there is more than one such Point equidistant from the robot.

        Otherwise, returns None.

        Note that only the landmarks included in the constraint dictionary can be looked for using this function. Other labels not included in 
        the constraint dictionary will always return None 

        Args:
            object_label (str): The desired type of object you want to navigate to 
            distance_threshold (float): The maximum allowable distance to consider the object as 'found'.

        Returns:
            Point : The nearest available waypoint next to the desired object 
        """ 
    
    def start_volumetric_gain_exploration():
        """
        Robot will randomly navigate using volumetric gain until "stop_robot" is called. 
        """ 

    def start_waypoint_navigation():
        """
        Robot with navigate in the most efficient path to a given waypoint using the "plan_to_waypoint" function. 
        You can exit this mode using "stop_robot" 
        """
    
    def go_to_waypoint(pt: Point): 
        """
        The robot will navigate to the given waypoint if it is available (not executing some other command such as exploring or planting)
        """

    def plant(): 
        """
        The robot will plant a seed.
        """ 

    def stop_robot():
        """
        Robot will safely stop and go into idle mode until either start_waypoint_navigation or start_volumetric_gain_exploration is called.
        """
        
>>> End API Definition 

