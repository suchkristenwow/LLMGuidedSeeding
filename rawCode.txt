Below is the Python code implementing the given policy using the provided classes and functions:

```python
import numpy as np
from shapely.geometry import Point, Polygon
from shapely.ops import nearest_points
import math

# Create instance of simBot
bot = simBot(config_path, plot_bounds, init_pose, target_locations, obstacle_locations)

# Check if the robot is inside the plot bounds
if not bot.in_plot_bounds():
    current_pose = bot.get_current_pose()
    nearest_point_on_perimeter, _ = nearest_points(Polygon(plot_bounds), Point(current_pose[0], current_pose[1]))
    # Set waypoint
    bot.current_waypoint = np.zeros(6,)
    bot.current_waypoint[0] = nearest_point_on_perimeter.x
    bot.current_waypoint[1] = nearest_point_on_perimeter.y
    bot.go_to_waypoint()

# Define a function for planting seeds in a 1m x 1m grid pattern
def plant_seeds_in_grid(bot, obstacles):
    x_min, y_min, x_max, y_max = Polygon(bot.plot_bounds).bounds
    x_values = np.arange(x_min, x_max, 1)
    y_values = np.arange(y_min, y_max, 1)
    for x in x_values:
        for y in y_values:
            if Point(x, y).within(Polygon(bot.plot_bounds)) and not Point(x, y).within(Polygon(obstacles)):
                bot.current_waypoint = np.array([x, y, 0, 0, 0, 0])
                bot.go_to_waypoint()
                bot.plant()

# Check for obstacles and prepare a list
obstacles = []
for obstacle in obstacle_locations:
    obstacles.append(obstacle_locations[obstacle])

# Plant seeds in a 1m x 1m grid
plant_seeds_in_grid(bot, obstacles)
```
This Python code first checks if the robot is inside the plot bounds. If it is not, it sets a waypoint inside the plot bounds and navigates the robot to this waypoint. It then defines a function to plant seeds in a 1m x 1m grid pattern, taking into account the plot bounds and obstacles. This function is then called to execute the planting of the seeds.