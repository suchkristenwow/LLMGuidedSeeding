initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/8556f3c3-61a9-4f4e-bf57-2ecc23703c6f/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'previously planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Check the current position of the robot in relation to the plot bounds. If the robot is outside of the plot bounds, plan and execute the shortest route possible to be inside the bounds.

2. Once inside the plot bounds, initiate the 'avoid' protocol in the robot's navigation system to avoid previously planted areas and any conmods.

3. Begin scanning for any conmods or previously planted areas within the plot using the RGB cameras and lidar-inertial odometry. If any are detected, mark their positions in the system memory for avoidance.

4. Implement a 'grid' pattern for planting seeds with a 'pattern_offset' of 1 meter, as per the constraints dictionary.

5. Move to the starting position of the grid pattern, which would be one corner of the plot. Confirm that this starting position is free of any conmods or previously planted areas.

6. Plant the first seed at the starting position and add the coordinates of this location to the system memory.

7. Navigate to the next grid point, which is 1 meter apart from the previous point in line with the 'pattern_offset'. Make sure to follow the 'avoid' protocol during navigation.

8. Before planting the seed, check that the current grid point doesn't overlap with any conmods or previously planted areas.

9. If the grid point is free, plant the seed and add this location to the system memory. If not, move to the next grid point and repeat the process.

10. Continue this process of navigation and planting in the grid pattern until all the seeds are planted or the entire plot has been covered.

11. If all seeds are planted before the entire plot is covered, terminate the task and update the user. If the entire plot is covered before all seeds are planted, notify the user and seek further instructions.

12. Upon completion of the task, save all the planting locations in the system memory for future reference and avoidance.

13. Report task completion and all relevant data to the user, including the number of seeds planted, area covered, and any obstacles encountered.
Feedback: Received message from backend: I like it
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
amazing
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
Human response: I like it
