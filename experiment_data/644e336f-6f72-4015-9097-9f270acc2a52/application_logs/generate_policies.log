initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/644e336f-6f72-4015-9097-9f270acc2a52/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid": "planted areas, conmods", "pattern": "grid", "pattern_offset": "1", "seed": "True"}

results_str:  {"avoid": "planted areas, conmods", "pattern": "grid", "pattern_offset": "1", "seed": "True"}
constraints: {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': '1', 'seed': True} 

building policy...
feedback is none!
Policy:  1. Check the current location of the robot. If the robot is outside the plot_bounds, plan and execute the shortest route possible to be inside the bounds.

2. Establish the 1mx1m grid pattern based on the provided 'pattern_offset' within the plot_bounds. This grid will guide the seeding process.

3. Initialize an empty list to record all the planted locations for tracking and avoiding in future steps.

4. Start from the first point in the planned grid pattern.

5. Use RGB cameras to scan the immediate environment for 'planted areas' and 'conmods', as indicated in the 'avoid' key in the constraint dictionary.

6. If any 'planted areas' or 'conmods' are detected in the immediate vicinity of the current point, mark the point as 'avoid' and move to the next point in the grid pattern.

7. If no 'planted areas' or 'conmods' are detected, execute the planting procedure at the current point. 

8. Add the coordinates of the newly planted area to the list of planted locations.

9. Move to the next point in the grid pattern using lidar-inertial odometry and GPS for navigation.

10. Repeat steps 5 to 9 until all points in the grid pattern within the plot_bounds have been covered.

11. If there's any issue or uncertainty at any point during the execution, interface with the human for more direction or context.

12. Once all points in the grid pattern have been covered and the planting task is completed, notify the user and provide the list of all the planted locations for reference and verification.

Please note that this policy maintains a safe distance from 'planted areas' and 'conmods', ensures seeding is done in a 1mx1m grid pattern, and keeps track of all planted locations as specified in the constraint dictionary and the given prompt.
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
I think this is great thank you
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
