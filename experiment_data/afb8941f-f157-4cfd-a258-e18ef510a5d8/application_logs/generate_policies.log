initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/afb8941f-f157-4cfd-a258-e18ef510a5d8/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid": "planted_area, conmods", "pattern": "grid", "pattern_offset": 1, "seed": "True"}

results_str:  {"avoid": "planted_area, conmods", "pattern": "grid", "pattern_offset": 1, "seed": "True"}
constraints:  {'avoid': 'planted_area, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Use the robot's localization capabilities (LIDAR-inertial odometry and GPS) to confirm if it is currently inside the given plot bounds. If not, the robot should plan the shortest possible route to the inside of the bounds.
2. Once the robot is confirmed to be inside the plot bounds, it should scan its immediate environment using its RGB cameras, avoiding the areas it has already planted or any "conmods" as specified in the 'avoid' constraint.
3. Following the 'grid' pattern specified in the constraint dictionary, the robot should create a 1mx1m grid within the plot bounds while taking into account the 'pattern_offset' of 1m. This will ensure that each seed is planted at a distance of 1m from the other.
4. As the robot moves within the plot bounds, it should constantly observe and avoid any landmarks that fall under the 'avoid' category.
5. The robot should start planting seeds in the grid pattern created, making sure to follow the 1m spacing as per the 'pattern_offset'. If the 'seed' boolean in the constraint dictionary is true, the robot should keep a list in its system memory of all the planted locations.
6. After planting each seed, the robot should update its 'planted_area' to include the new location. This area should be avoided in the next iterations of the planting process.
7. Continue steps 4-6 until the whole plot within the plot bounds has been planted following the grid pattern.
8. Once all seeds are planted, the robot should send a completion signal. It should remain inside the plot bounds until further instructions are received.
9. If at any point, the robot encounters an object or landmark that it can't identify or locate, it should pause its operation and ask the user "I can't find {landmark}, where should I look?" before proceeding.
