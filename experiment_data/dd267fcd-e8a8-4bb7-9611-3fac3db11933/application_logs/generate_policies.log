initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/dd267fcd-e8a8-4bb7-9611-3fac3db11933/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. First, initialize your location using the lidar-inertial odometry and GPS system. If your initial location is outside the plot bounds, calculate the shortest route to the operational area and move there.
2. Verify the "plot_bounds" variable and the constraint dictionary are loaded correctly into the system memory. The robot needs this information to perform the task.
3. Begin by scanning the surroundings using your RGB cameras. Identify any landmarks, especially the "conmods" that need to be avoided, and any areas that have been previously planted.
4. Start at the corner of the plot that is closest to your current position. This will be your initial planting point.
5. If the "seed" boolean from the constraint dictionary is true, prepare the seeding mechanism to start planting.
6. Plant the first seed at the initial planting point. Add the coordinates of this point to the list of planted locations in the system memory.
7. Following the 'grid' pattern specified in the constraint dictionary, calculate the next point for planting. This should be 1m away from the current position, the 'pattern_offset' specified in the dictionary.
8. Before moving to the next point, use the RGB camera to check for any obstructions along the path, especially any "conmods" or previously planted areas that should be avoided.
9. If the path is clear, proceed to the next point and plant the next seed.
10. If there is an obstruction, calculate an alternative route that bypasses the obstruction and leads to the next point, keeping within the plot bounds. Always choose the shortest possible route to minimize travel time.
11. Repeat steps 7 to 10 until the entire plot has been planted following the 'grid' pattern.
12. If there is a landmark in the 'goal_lms' which cannot be located in the immediate environment, notify the user by saying, "I can't find {landmark}, where should I look?" and await further instructions.
13. Once the entire plot has been planted, confirm completion of the task to the user.
14. Finally, save and upload the list of planted locations from the system memory for record-keeping and future reference.
Question:  I believe this policy should complete the desired task. What do you think?
1. First, initialize your location using the lidar-inertial odometry and GPS system. If your initial location is outside the plot bounds, calculate the shortest route to the operational area and move there.
2. Verify the "plot_bounds" variable and the constraint dictionary are loaded correctly into the system memory. The robot needs this information to perform the task.
3. Begin by scanning the surroundings using your RGB cameras. Identify any landmarks, especially the "conmods" that need to be avoided, and any areas that have been previously planted.
4. Start at the corner of the plot that is closest to your current position. This will be your initial planting point.
5. If the "seed" boolean from the constraint dictionary is true, prepare the seeding mechanism to start planting.
6. Plant the first seed at the initial planting point. Add the coordinates of this point to the list of planted locations in the system memory.
7. Following the 'grid' pattern specified in the constraint dictionary, calculate the next point for planting. This should be 1m away from the current position, the 'pattern_offset' specified in the dictionary.
8. Before moving to the next point, use the RGB camera to check for any obstructions along the path, especially any "conmods" or previously planted areas that should be avoided.
9. If the path is clear, proceed to the next point and plant the next seed.
10. If there is an obstruction, calculate an alternative route that bypasses the obstruction and leads to the next point, keeping within the plot bounds. Always choose the shortest possible route to minimize travel time.
11. Repeat steps 7 to 10 until the entire plot has been planted following the 'grid' pattern.
12. If there is a landmark in the 'goal_lms' which cannot be located in the immediate environment, notify the user by saying, "I can't find {landmark}, where should I look?" and await further instructions.
13. Once the entire plot has been planted, confirm completion of the task to the user.
14. Finally, save and upload the list of planted locations from the system memory for record-keeping and future reference.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
wow this looks so good I love it. I am going to hang it on the fridge for the entire family to see. Great job buddy.
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
