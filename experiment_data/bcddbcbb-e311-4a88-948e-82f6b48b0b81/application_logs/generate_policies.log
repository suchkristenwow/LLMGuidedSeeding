initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/bcddbcbb-e311-4a88-948e-82f6b48b0b81/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted area, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Verify the current location of the robot using the lidar-inertial odometry and GPS. If the robot is outside the plot bounds, navigate to the closest edge of the bounds.
2. Initialize an empty list in the system memory to store the coordinates of the areas where the robot has planted seeds. This list will be referred to as the "Planted Locations List".
3. Plan a grid-based path inside the operational bounds, taking into account the 1m x 1m pattern offset specified in the constraint dictionary.
4. Begin navigating along the planned path.
5. Before moving to each grid point, check the "avoid" list in the constraint dictionary. If the grid point falls within a planted area or any conmods (as per the RGB cameras), recalculate the path to avoid these locations.
6. At each valid grid point, perform the following operations:
   a. Plant a seed at the current location.
   b. Add the coordinates of the current location to the Planted Locations List in the system memory.
7. Continue the process of navigation and planting until all valid grid points within the plot bounds have been covered.
8. Once all valid points have been covered, stop navigation and inform the user about the completion of the task.
9. If at any point during the operation the robot encounters an error or an unknown landmark, pause the operation and inform the user about the situation for further direction or context.
10. If the robot encounters a situation where it can't avoid the areas specified in the "avoid" list, inform the user about the problem and ask for further direction.
Question:  I believe this policy should complete the desired task. What do you think?
1. Verify the current location of the robot using the lidar-inertial odometry and GPS. If the robot is outside the plot bounds, navigate to the closest edge of the bounds.
2. Initialize an empty list in the system memory to store the coordinates of the areas where the robot has planted seeds. This list will be referred to as the "Planted Locations List".
3. Plan a grid-based path inside the operational bounds, taking into account the 1m x 1m pattern offset specified in the constraint dictionary.
4. Begin navigating along the planned path.
5. Before moving to each grid point, check the "avoid" list in the constraint dictionary. If the grid point falls within a planted area or any conmods (as per the RGB cameras), recalculate the path to avoid these locations.
6. At each valid grid point, perform the following operations:
   a. Plant a seed at the current location.
   b. Add the coordinates of the current location to the Planted Locations List in the system memory.
7. Continue the process of navigation and planting until all valid grid points within the plot bounds have been covered.
8. Once all valid points have been covered, stop navigation and inform the user about the completion of the task.
9. If at any point during the operation the robot encounters an error or an unknown landmark, pause the operation and inform the user about the situation for further direction or context.
10. If the robot encounters a situation where it can't avoid the areas specified in the "avoid" list, inform the user about the problem and ask for further direction.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
Proceed with policy
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
