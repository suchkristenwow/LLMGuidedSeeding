initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/8bc05842-b17f-4035-ad93-63e755c07318/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods", "pattern":"grid", "pattern_offset":1, "seed":"True"}

results_str:  {"avoid":"planted areas, conmods", "pattern":"grid", "pattern_offset":1, "seed":"True"}
constraints:  {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. First, verify that the robot is inside the plot bounds. If not, find the shortest route to the plot bounds and navigate there.
2. Check if the robot's current position is in any of the areas to be avoided as defined in the 'avoid' entry of the constraint dictionary. If the robot is in an 'avoid' area, find the shortest route out of the area while still remaining within the plot bounds.
3. Once the robot is in a safe position, it should start implementing the 'grid' pattern as specified in the 'pattern' entry of the constraint dictionary.
4. Using the 'pattern_offset' value as a guide, the robot will start to move in a 1m x 1m grid within the plot bounds, while constantly checking and making sure it is not planning to drive into any 'avoid' areas.
5. If the robot is about to move into an 'avoid' area, it should recalculate its path to stay within the grid pattern but avoid the area.
6. Once the robot has reached a grid point where it is safe to plant, it should perform the seeding operation if the 'seed' entry in the dictionary is set to 'True'. 
7. After seeding, add the current location to the system memory to keep track of the planted locations.
8. Continue the grid pattern and seeding process until the entire area within the plot bounds has been covered.
9. If the robot encounters any unknown objects or is unsure of where to move next due to the 'avoid' areas, interface with the human for more directions.
10. After finishing the planting process, provide a summary report including the number of seeds planted and the locations of the planted areas. 

Note: If the robot is unable to find the plot bounds or any landmarks, it should ask the user "I can't find {landmark}, where should I look?" and wait for further instructions.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
i lie it
verifying the policy; this is the llm result: Your message is a bit unclear. The phrase "i lie it" doesn't clearly indicate whether you approve or disapprove of the policy, or if you're suggesting any changes. Could you please provide more context or clarify your feedback?
Updating feedback!
building policy...
{'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
