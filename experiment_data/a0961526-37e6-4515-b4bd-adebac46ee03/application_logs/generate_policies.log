initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/a0961526-37e6-4515-b4bd-adebac46ee03/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints: {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True} 

building policy...
feedback is none!
Policy:  1. First, validate the current position of the robot. If the robot's current position is outside the plot bounds, calculate the shortest path to enter the plot bounds without violating any constraint.
2. Once inside the plot bounds, set up a grid pattern with 1m x 1m spacing as per the 'pattern' and 'pattern_offset' in the constraints dictionary.
3. Initiate the seeding procedure. As per the 'seed' variable, the robot should prepare to drop seeds at each grid intersection.
4. Before moving to each grid intersection, verify if it falls in a 'planted area' or 'conmod'. If it does, avoid that intersection as per the 'avoid' variable in the constraints dictionary.
5. If the intersection is not within a 'planted area' or 'conmod', navigate to the intersection and drop a seed. Add this location to the list of 'planted areas'.
6. Repeat steps 4 and 5 until all intersections of the grid within the plot bounds have been addressed.
7. If a conflict arises where the robot is unable to navigate to an intersection without violating an 'avoid' constraint, interface with the user for guidance on how to proceed.
8. After all intersections have been addressed, store the final list of 'planted areas' in system memory for future reference.
9. Send a completion message to the user, summarizing the task and providing information about any issues encountered or areas not planted due to 'avoid' constraints.
10. If there are remaining seeds, ask the user for further instructions. If there are no remaining seeds, or upon receiving further instructions, return the robot to its initial position or as directed by the user.
Waiting for human response from backend: 0
Waiting for human response from backend: 1
Waiting for human response from backend: 2
Waiting for human response from backend: 3
Waiting for human response from backend: 4
Waiting for human response from backend: 5
Waiting for human response from backend: 6
Waiting for human response from backend: 7
Waiting for human response from backend: 8
Waiting for human response from backend: 9
Waiting for human response from backend: 10
Waiting for human response from backend: 11
Waiting for human response from backend: 12
Waiting for human response from backend: 13
Waiting for human response from backend: 14
Waiting for human response from backend: 15
Waiting for human response from backend: 16
Waiting for human response from backend: 17
Waiting for human response from backend: 18
Waiting for human response from backend: 19
Waiting for human response from backend: 20
Waiting for human response from backend: 21
Waiting for human response from backend: 22
Waiting for human response from backend: 23
Waiting for human response from backend: 24
Waiting for human response from backend: 25
Waiting for human response from backend: 26
Waiting for human response from backend: 27
Waiting for human response from backend: 28
Waiting for human response from backend: 29
Waiting for human response from backend: 30
Waiting for human response from backend: 31
Waiting for human response from backend: 32
Waiting for human response from backend: 33
Waiting for human response from backend: 34
Waiting for human response from backend: 35
Waiting for human response from backend: 36
Waiting for human response from backend: 37
Waiting for human response from backend: 38
Waiting for human response from backend: 39
Waiting for human response from backend: 40
Waiting for human response from backend: 41
Waiting for human response from backend: 42
Waiting for human response from backend: 43
Waiting for human response from backend: 44
Waiting for human response from backend: 45
Waiting for human response from backend: 46
Waiting for human response from backend: 47
Waiting for human response from backend: 48
Waiting for human response from backend: 49
Waiting for human response from backend: 50
Waiting for human response from backend: 51
Waiting for human response from backend: 52
Waiting for human response from backend: 53
Waiting for human response from backend: 54
Waiting for human response from backend: 55
Waiting for human response from backend: 56
Waiting for human response from backend: 57
Waiting for human response from backend: 58
Waiting for human response from backend: 59
Waiting for human response from backend: 60
Waiting for human response from backend: 61
Waiting for human response from backend: 62
Waiting for human response from backend: 63
Waiting for human response from backend: 64
Waiting for human response from backend: 65
Waiting for human response from backend: 66
Waiting for human response from backend: 67
Waiting for human response from backend: 68
Waiting for human response from backend: 69
Waiting for human response from backend: 70
Waiting for human response from backend: 71
Waiting for human response from backend: 72
Waiting for human response from backend: 73
Waiting for human response from backend: 74
Waiting for human response from backend: 75
Waiting for human response from backend: 76
Waiting for human response from backend: 77
Waiting for human response from backend: 78
Waiting for human response from backend: 79
Waiting for human response from backend: 80
Waiting for human response from backend: 81
Waiting for human response from backend: 82
Waiting for human response from backend: 83
Waiting for human response from backend: 84
Waiting for human response from backend: 85
Waiting for human response from backend: 86
Waiting for human response from backend: 87
Waiting for human response from backend: 88
Waiting for human response from backend: 89
Waiting for human response from backend: 90
Waiting for human response from backend: 91
Waiting for human response from backend: 92
Waiting for human response from backend: 93
Waiting for human response from backend: 94
Waiting for human response from backend: 95
Waiting for human response from backend: 96
Waiting for human response from backend: 97
Waiting for human response from backend: 98
Waiting for human response from backend: 99
Waiting for human response from backend: 100
Waiting for human response from backend: 101
Waiting for human response from backend: 102
Waiting for human response from backend: 103
Waiting for human response from backend: 104
Waiting for human response from backend: 105
Waiting for human response from backend: 106
Waiting for human response from backend: 107
Waiting for human response from backend: 108
Waiting for human response from backend: 109
Waiting for human response from backend: 110
Waiting for human response from backend: 111
Waiting for human response from backend: 112
Waiting for human response from backend: 113
Waiting for human response from backend: 114
Waiting for human response from backend: 115
Waiting for human response from backend: 116
Waiting for human response from backend: 117
Waiting for human response from backend: 118
Waiting for human response from backend: 119
Waiting for human response from backend: 120
Waiting for human response from backend: 121
Waiting for human response from backend: 122
Waiting for human response from backend: 123
Waiting for human response from backend: 124
Waiting for human response from backend: 125
Waiting for human response from backend: 126
Waiting for human response from backend: 127
Waiting for human response from backend: 128
Waiting for human response from backend: 129
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
i like it
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
