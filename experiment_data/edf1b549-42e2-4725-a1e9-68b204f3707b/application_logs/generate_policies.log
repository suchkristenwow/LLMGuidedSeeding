initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/edf1b549-42e2-4725-a1e9-68b204f3707b/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints: {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True} 

building policy...
feedback is none!
Policy:  1. Check the current location of the robot using GPS and lidar-inertial odometry. If the robot is outside the operational bounds ("plot_bounds"), plan the shortest route possible to move inside the bounds.

2. Initialize an empty list in the system memory named "planted_locations" to keep track of all the planted locations.

3. Begin observing the environment using the robot's RGB cameras to identify objects that need to be avoided ('planted areas' and 'conmods') as per the 'avoid' entry in the constraint dictionary.

4. Start at one corner of the plot bounds. Make sure this starting position is a suitable location for planting a seed i.e., it is not a 'planted area' or a 'conmod'. If the starting location is not suitable, move the robot to the nearest suitable location following the shortest route possible.

5. Plant a seed at the current location and add this location to the "planted_locations" list.

6. Move the robot 1 meter along the x-axis (or y-axis) of the robot's current coordinate frame, in accordance with the 'grid' pattern and 'pattern_offset' value specified in the constraint dictionary. Ensure the robot avoids 'planted areas' and 'conmods' during the movement.

7. Repeat steps 5 and 6 until you reach the end of the plot bounds along the x-axis (or y-axis).

8. Once you have reached the end of the plot bounds, move the robot 1 meter along the y-axis (or x-axis, opposite to the axis of initial movement). Ensure the robot avoids 'planted areas' and 'conmods' during the movement.

9. Turn the robot to face the opposite direction, and repeat steps 5 and 6 until you reach the other end of the plot bounds.

10. Repeat steps 8 and 9 until the entire plot has been covered in a 'grid' pattern, with seeds planted every 1 meter.

11. If during the task execution, the robot cannot locate a clear path due to an unavoidable obstacle or if the robot is unable to find a suitable location for planting, notify the user: "I can't find a clear path due to {obstacle}, where should I go?" or "I can't find a suitable location for planting, where should I look?"

12. Upon completion of the task, store the final list of "planted_locations" in the system memory for future reference and notify the user that the planting task has been completed.
