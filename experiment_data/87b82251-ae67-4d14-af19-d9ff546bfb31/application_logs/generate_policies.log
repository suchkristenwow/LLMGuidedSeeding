initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/87b82251-ae67-4d14-af19-d9ff546bfb31/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'previously planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Begin by checking your current location. Use your lidar-inertial odometry and GPS to determine your coordinates.

2. Next, check if you are within the plot bounds. If not, determine the shortest route to the plot and travel there.

3. Once within the plot, begin observing the surroundings using your RGB cameras. Identify any conmods and previously planted areas that are within your immediate environment.

4. If you find any conmods or previously planted areas, mark them on your internal map. This will help you avoid these areas while navigating within the plot.

5. With the internal map updated, create a grid pattern for planting seeds. This grid should have a separation of 1m between each planting point, as specified in the 'pattern_offset' value. Ensure that the grid aligns with the plot bounds and avoids marked areas.

6. Start at the first point of your created grid. Check your surrounding to ensure that you are not close to any previously planted area or conmods. If the location is safe, plant a seed.

7. Record the coordinates of the planted seed in the system memory.

8. Move to the next point on your grid, ensuring that you do not drive over any conmods or previously planted areas.

9. Repeat steps 6 to 8 until you have finished planting on all points in your grid. Make sure to record all planted locations in the system memory.

10. After you've planted all the seeds, send a completion signal to the user indicating that the task is done.

11. Maintain the list of all planted locations in the system memory for future reference and to avoid replanting in those areas.

Note: If during the task, you are unable to locate any objects specified under 'avoid' or 'goal_lms', ask the user for guidance with the message "I can't find {landmark}, where should I look?".
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
good
verifying the policy; this is the llm result: You have only provided the word "good". I will need more information to determine whether this implies approval of the policy or not. Based on the single word given, it's not clear whether any changes were suggested, so I can't provide a definitive True or False response. Could you please provide more context or a more detailed statement?
Found a valid policy approved by the human!
Human response: None
