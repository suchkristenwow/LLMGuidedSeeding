initting the Policy Generator with these arguments:  Namespace(prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/aa387e12-66d4-4ddb-a95d-ab2dcf2b2fb2/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv')
parsing prompt to get constraints ...
key:  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
llm_result: {"avoid": "conmods, planted_area", "pattern": "grid", "pattern_offset": 1, "seed": "True"}
results_str:  {"avoid": "conmods, planted_area", "pattern": "grid", "pattern_offset": 1, "seed": "True"}
constraints:  {'avoid': 'conmods, planted_area', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
constraints[k]:  conmods, planted_area
<class 'str'>
split_constraint:  ['conmods', ' planted_area']
this is  a list!
constraints[k]:  grid
<class 'str'>
constraints[k]:  1
<class 'int'>
constraints[k]:  True
<class 'bool'>
extending prompt lms
prompt lms:  ['conmods', ' planted_area']
I dont know what conmods is. Ill have to ask.
I dont know what  planted_area is. Ill have to ask.
using enhanced prompt to generate a policy
key:  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
policy:  None
