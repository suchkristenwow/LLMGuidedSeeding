initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/aad992e1-46c3-473a-af78-ecc08386ed69/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"conmods or planted areas","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"conmods or planted areas","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'conmods or planted areas', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Begin by using the robot's localization capabilities to determine its current position relative to the plot bounds. If the robot is outside the plot bounds, calculate the shortest route to the nearest point inside the bounds. 

2. Once inside the plot bounds, utilize the RGB cameras and GPS to identify any existing conmods or previously planted areas that should be avoided as per the 'avoid' directive in the constraint dictionary.

3. Create a list in the system memory to store all of the locations where seeds have been planted. This will be used to ensure the robot does not drive over these areas again.

4. Initialize a 1m x 1m grid pattern within the plot bounds using the 'pattern_offset' parameter from the constraint dictionary. 

5. Begin executing the planting task. For each cell in the grid:

     a. Use the robot's cameras and localization capabilities to identify whether it contains an object from the 'avoid' list. If so, skip this cell.
     
     b. If the cell is clear, navigate to this location using lidar-inertial odometry and GPS. If there is any uncertainty regarding the path, interface with the human operator for guidance.
     
     c. Upon reaching the location, plant a seed. Add this location to the list of planted locations in the system memory.

6. Continue executing the above steps for each cell in the grid until all cells have been processed.

7. If at any point the robot cannot find the next grid location, inform the user by saying: "I can't find the next grid location, where should I look?"

8. After planting in all the grid cells, return to the starting position using the shortest path, avoiding any planted areas or conmods. 

9. Finally, report the completion of the task to the user along with a list of all planted locations.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
this is my feedback
verifying the policy; this is the llm result: Your message is not clear. Could you please provide more details so I can better assist you?
Updating feedback!
building policy...
{'avoid': 'conmods or planted areas', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
