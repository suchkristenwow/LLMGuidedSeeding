 * Serving Flask app 'app'
 * Debug mode: on
Received message: I believe this policy should complete the desired task. What do you think?
1. Verify that the robot is within the given plot bounds using the GPS and Lidar-Inertial odometry systems. 
    - If the robot is outside of the bounds, calculate the shortest route to the nearest point within the bounds and navigate there. 

2. Start the mapping process, initialize the map with the plot bounds and identify the landmarks within the plot using the RGB camera. 

3. Based on the constraint dictionary, mark the areas to avoid, which are 'previously planted areas and conmods' on the map. 

4. Set up a 1m x 1m grid pattern within the plot bounds for planting seeds based on the 'pattern' and 'pattern_offset' from the constraint dictionary. 

5. Start from the first point on the grid pattern, check if it is marked as an area to avoid. 
    - If yes, move to the next point in the grid. 
    - If no, move to this point and plant a seed there. 

6. Update the 'previously planted areas' list in the system memory with the current location after a seed has been planted. 

7. Proceed to the next point on the grid and repeat steps 5 and 6 until all the points on the grid within the plot bounds have been covered. 

8. If a 'conmod' or a 'previously planted area' is encountered that is not marked on the map, update the map accordingly and adjust the planting grid as required.

9. When the grid planting is complete, notify the user of completion and provide a list of all planted locations. 

10. If there is a landmark in the 'goal_lms' which the robot can't locate in the immediate environment, inform the user with the message "I can't find {landmark}, where should I look?" and await further instructions. 

