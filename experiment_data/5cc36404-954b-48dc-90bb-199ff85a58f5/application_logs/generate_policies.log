initting the Policy Generator with these arguments:  Namespace(prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/5cc36404-954b-48dc-90bb-199ff85a58f5/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv')
self.settings:  {'prompt_file': '/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', 'waypoint_threshold': 0.5, 'logging_directory': '/home/kristen/LLMGuidedSeeding/experiment_data/', 'commonObj_path': '/home/kristen/LLMGuidedSeeding/configs/commonObjs.txt', 'common_ip': '40.78.49.78', 'robot': {'object_sever_url': 'http://0.0.0.0:5005', 'host_url': 'http://0.0.0.0:5000', 'eps_dbscan': 0.5, 'min_samples': 5, 'median_filter_rate': 2, 'median_filtier_distance_threshold': 0.5, 'waypoint_threshold': 0.5}, 'llm_model': {'model_name': 'openai', 'full_name': 'gpt-3.5-turbo', 'api_env_var': 'openai_key'}, 'vqa_model': {'full_name': 'llava-1.5', 'ip': '0.0.0.0', 'port': 8000, 'temp': 0.8}}
parsing prompt to get constraints ...
llm_result: Based on the prompt, the relevant constraints and goal landmarks can be structured into the following dictionary format:

{"goal_lms": "bounded_area", "pattern": "grid", "landmark_offset": 1, "avoid": ["planted", "conmods"], "seed": "True"}

This format captures the instructions to plant in a 1m x 1m grid within the bounded area, while avoiding driving over areas where planting has occurred or any conmods. If this format aligns with your understanding of the prompt, you can use this dictionary to write a policy for the robotic agent. If you have any specific modifications or additional details to consider, feel free to provide further instructions.
results_str:  {"goal_lms": "bounded_area", "pattern": "grid", "landmark_offset": 1, "avoid": ["planted", "conmods"], "seed": "True"}
constraints:  {'goal_lms': 'bounded_area', 'pattern': 'grid', 'landmark_offset': 1, 'avoid': ['planted', 'conmods'], 'seed': True}
building policy...
Question:  I believe this policy should complete the desired task. What do you think?
1. Start by checking if the robot is currently within the plot bounds. If not, plan the shortest route to get inside the plot bounds while avoiding any obstacles.
2. Begin by identifying the landmarks in the environment to locate the "bounded_area". If the robot can't find the "bounded_area" landmark, ask the user for guidance on where to look.
3. Once the "bounded_area" is located, divide the area into a 1m x 1m grid to determine the planting locations.
4. Use the RGB cameras to identify any existing planted areas or conmods (constrained modules) to avoid driving over them during planting.
5. Start planting seeds in the designated grid locations within the bounded area while ensuring to maintain the specified distance from any obstacles or planted areas.
6. Continuously monitor the surroundings using the RGB cameras to avoid obstacles and adjust the planting strategy if necessary.
7. Complete the planting process in the entire bounded area grid while adhering to the constraints and avoiding the specified obstacles.
8. Once the task is completed, provide a status update to indicate that the planting in the 1m x 1m grid within the bounded area has been successfully accomplished while avoiding planted areas and conmods.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 

can you add a step where you update a running list of planted locations so you can be sure to avoid them
verifying the policy; this is the llm result: False
policy verification result: False
Question:  I believe this policy should complete the desired task. What do you think?
1. Start by checking if the robot is currently within the plot bounds. If not, plan the shortest route to get inside the plot bounds while avoiding any obstacles.
2. Begin by identifying the landmarks in the environment to locate the "bounded_area". If the robot can't find the "bounded_area" landmark, ask the user for guidance on where to look.
3. Once the "bounded_area" is located, divide the area into a 1m x 1m grid to determine the planting locations.
4. Use the RGB cameras to identify any existing planted areas or conmods (constrained modules) to avoid driving over them during planting.
5. Start planting seeds in the designated grid locations within the bounded area while ensuring to maintain the specified distance from any obstacles or planted areas.
6. Continuously monitor the surroundings using the RGB cameras to avoid obstacles and adjust the planting strategy if necessary.
7. Complete the planting process in the entire bounded area grid while adhering to the constraints and avoiding the specified obstacles.
8. Once the task is completed, provide a status update to indicate that the planting in the 1m x 1m grid within the bounded area has been successfully accomplished while avoiding planted areas and conmods.
Feedback: 