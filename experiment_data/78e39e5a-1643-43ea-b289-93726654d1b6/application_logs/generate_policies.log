initting the Policy Generator with these arguments:  Namespace(prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/78e39e5a-1643-43ea-b289-93726654d1b6/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv')
self.settings:  {'prompt_file': '/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', 'waypoint_threshold': 0.5, 'logging_directory': '/home/kristen/LLMGuidedSeeding/experiment_data/', 'commonObj_path': '/home/kristen/LLMGuidedSeeding/configs/commonObjs.txt', 'common_ip': '40.78.49.78', 'robot': {'object_sever_url': 'http://0.0.0.0:5005', 'host_url': 'http://0.0.0.0:5000', 'eps_dbscan': 0.5, 'min_samples': 5, 'median_filter_rate': 2, 'median_filtier_distance_threshold': 0.5, 'waypoint_threshold': 0.5}, 'llm_model': {'model_name': 'openai', 'full_name': 'gpt-3.5-turbo', 'api_env_var': 'openai_key'}, 'vqa_model': {'full_name': 'llava-1.5', 'ip': '0.0.0.0', 'port': 8000, 'temp': 0.8}}
parsing prompt to get constraints ...
llm_result: To execute the given task, the relevant constraints and goal landmarks can be structured in the following dictionary format:

{"pattern": "grid", "pattern_offset": 1.0, "avoid": ["seeded_area", "conmods"], "seed": "True"}

This dictionary captures the key elements of the prompt, specifying the planting pattern as a grid with 1m spacing, avoiding driving over seeded areas and conmods (conditions/modifications), and indicating that the robot should plant seeds as instructed.
results_str:  {"pattern": "grid", "pattern_offset": 1.0, "avoid": ["seeded_area", "conmods"], "seed": "True"}
constraints:  {'pattern': 'grid', 'pattern_offset': 1.0, 'avoid': ['seeded_area', 'conmods'], 'seed': True}
building policy...
self.feedback: None
self.policy: None
Question:  I believe this policy should complete the desired task. What do you think?
1. Start by checking the current location of the robot using lidar-inertial odometry and GPS to ensure it is within the plot bounds.
2. If the robot is outside the plot bounds, plan the shortest route to get inside the bounds while avoiding obstacles and other constraints using the lidar data for obstacle detection.
3. Once inside the plot bounds, start scanning the environment using the RGB cameras to locate any existing shrubs, fences, or other landmarks specified in the constraint dictionary.
4. Begin planting seeds in a 1mx1m grid pattern within the bounded area, making sure to maintain the specified offset of 1.0m between each seed planted.
5. As the robot moves to plant seeds, continuously check the surroundings to avoid driving over any areas where seeds have already been planted or any conmods (constrained modules).
6. If there is any uncertainty in locating a landmark specified in the constraint dictionary, prompt the user with "I can't find {landmark}, where should I look?" for further guidance.
7. Continue planting seeds in the grid pattern until the entire bounded area has been covered, ensuring to adhere to the avoidance constraints provided in the constraint dictionary.
8. Once all seeds have been planted within the grid pattern and the constraints have been followed, the task of revegetation in the degraded rangelands is complete.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 

You should remove step 6 and add this part to step 7: "Update the system memory with the location of each planted seed as to avoid driving over them."
verifying the policy; this is the llm result: False
policy verification result: False
Question:  I believe this policy should complete the desired task. What do you think?
1. Start by checking the current location of the robot using lidar-inertial odometry and GPS to ensure it is within the plot bounds.
2. If the robot is outside the plot bounds, plan the shortest route to get inside the bounds while avoiding obstacles and other constraints using the lidar data for obstacle detection.
3. Once inside the plot bounds, start scanning the environment using the RGB cameras to locate any existing shrubs, fences, or other landmarks specified in the constraint dictionary.
4. Begin planting seeds in a 1mx1m grid pattern within the bounded area, making sure to maintain the specified offset of 1.0m between each seed planted.
5. As the robot moves to plant seeds, continuously check the surroundings to avoid driving over any areas where seeds have already been planted or any conmods (constrained modules).
6. If there is any uncertainty in locating a landmark specified in the constraint dictionary, prompt the user with "I can't find {landmark}, where should I look?" for further guidance.
7. Continue planting seeds in the grid pattern until the entire bounded area has been covered, ensuring to adhere to the avoidance constraints provided in the constraint dictionary.
8. Once all seeds have been planted within the grid pattern and the constraints have been followed, the task of revegetation in the degraded rangelands is complete.
Feedback: 