initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/fa324bfa-ab2f-40ff-999d-4ad6748d7fe6/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted area, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Check the current location of the robot using lidar-inertial odometry and GPS.
2. If the robot is outside the plot bounds, calculate the shortest path to enter the plot and follow this path.
3. Once within the plot bounds, initialize an empty list to track seeded locations.
4. Identify all existing 'planted area' and 'conmods' within the plot bounds using the robot's RGB cameras.
5. Add these identified locations to a list of areas to avoid.
6. Plan a grid pattern within the plot bounds, taking into account the 'pattern_offset' of 1 meter. The pattern should be planned in such a way that it avoids all locations in the 'avoid' list.
7. Start navigating through the planned grid pattern. At each grid intersection:
   - Check if this location is within the 'avoid' areas using the RGB cameras and GPS.
   - If not, plant a seed at this location.
   - Add the seeded location to the seeded locations list.
8. Continue this process until the entire grid pattern has been traversed and seeds have been planted at all safe grid intersections.
9. If there's an object in the 'avoid' list that obstructs the planned route, calculate a detour around the object and continue with the seeding process.
10. Update the 'avoid' list in real time as new 'planted area' and 'conmods' are encountered.
11. Once the entire grid has been covered and seeding process is complete, store the seeded locations list for future reference.
12. Report the completion of the task to the user with a summary of the operation including the total area covered and number of seeds planted.
13. If at any point, the robot can't find a clear path due to obstructions, alert the user and ask for further instructions.
Feedback: 