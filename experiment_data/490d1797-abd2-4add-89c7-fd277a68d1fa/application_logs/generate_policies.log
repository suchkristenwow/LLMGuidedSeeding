initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/490d1797-abd2-4add-89c7-fd277a68d1fa/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted area, conmods", "pattern":"grid", "pattern_offset":1, "seed":"True"}

results_str:  {"avoid":"planted area, conmods", "pattern":"grid", "pattern_offset":1, "seed":"True"}
constraints: {'avoid': 'planted area, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True} 

building policy...
feedback is none!
Policy:  1. Initialize the system to start the task. Check if the robot is within the plot bounds. If not, calculate and follow the shortest path to enter the plot bounds.

2. Once inside the plot bounds, initiate the 'grid' pattern for planting as per the 'pattern_offset' of 1m, taking care to avoid 'planted area' and 'conmods' as mentioned in the 'avoid' section of the constraint dictionary.

3. Begin by moving to the nearest corner of the plot bounds, using the RGB camera and lidar-inertial odometry to navigate and identify landmarks and objects to avoid.

4. Start planting seeds at 1m intervals along the width of the plot area. Each planting location should be stored in the system memory.

5. After the completion of one row, move 1m in the perpendicular direction using lidar-inertial odometry and GPS for accurate positioning.

6. Start planting seeds at 1m intervals along this row, in the opposite direction to the previous row. Each new planting location should be added to the system memory.

7. Repeat steps 5 and 6 until the entire plot area has been covered in a 1m x 1m grid pattern.

8. If at any point the robot is unable to find a clear path due to the presence of 'planted areas' or 'conmods', inform the user saying "I am unable to find a clear path due to the presence of planted areas or conmods. Please provide further instructions."

9. Once the task is complete, provide a summary to the user, including the total area covered, number of seeds planted, and any difficulties encountered during the operation. 

10. End the task and switch to standby mode, awaiting further instructions.
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
That'll do pig that'll do
verifying the policy; this is the llm result: The feedback provided does not clearly express whether the user approves of the policy or not, and there are no suggested changes. However, the phrase "That'll do pig that'll do" is a quote from the movie Babe and generally indicates satisfaction or approval. Based on this, I would infer "True". But it's important to note that this is an inference, not a clear confirmation.
Found a valid policy approved by the human!
