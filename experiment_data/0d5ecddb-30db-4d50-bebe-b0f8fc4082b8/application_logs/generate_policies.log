initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/0d5ecddb-30db-4d50-bebe-b0f8fc4082b8/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"pattern": "grid", "pattern_offset": 1, "avoid": "planted area, conmods", "seed": "True"}

results_str:  {"pattern": "grid", "pattern_offset": 1, "avoid": "planted area, conmods", "seed": "True"}
constraints: {'pattern': 'grid', 'pattern_offset': 1, 'avoid': 'planted area, conmods', 'seed': True} 

building policy...
feedback is none!
Policy:  1. First, check the current location using GPS and lidar-inertial odometry to ensure the robot is within the plot bounds. If the robot is outside the bounds, plan and execute the shortest route to be inside the plot bounds. 

2. Once inside the bounds, begin localization and scanning of the environment using RGB cameras to detect any pre-existing 'planted areas' or 'conmods' to be avoided. If any of these objects are detected, mark their location in the system memory.

3. Begin to establish a 1m x 1m grid pattern within the plot bounds for planting. Ensure this grid avoids any marked locations from step 2. 

4. Once the planting grid has been established, begin navigation towards the first grid point. If an object from the 'avoid' list is detected on route to the grid point, reroute to avoid the object.

5. Upon reaching the first grid point, execute the seeding process if the 'seed' boolean in the constraint dictionary is True.

6. Once seeding is complete, mark the location in the system memory as a 'planted area'. 

7. Then, navigate to the next point in the established grid pattern. Repeat steps 4 to 6 for all points in the grid pattern until the entire grid has been seeded.

8. If at any point during navigation, the robot encounters an unknown object that could be a 'conmod', ask the user for clarification: "I have found an unknown object. Could this be a conmod?"

9. Once all points in the grid have been seeded, confirm the completion of the task to the user: "All points in the grid have been successfully seeded. The task is complete."

10. Finally, ensure all locations of the 'planted areas' are stored in the system memory for future reference and tasks. 

Please note, this policy ensures the robot will avoid driving over already planted areas and any conmods, as per the prompt and constraint dictionary.
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
Great job buddy
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
