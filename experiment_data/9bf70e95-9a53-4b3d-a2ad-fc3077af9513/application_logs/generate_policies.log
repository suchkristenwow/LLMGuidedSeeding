initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/9bf70e95-9a53-4b3d-a2ad-fc3077af9513/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted areas", "conmods"], "seed": "True"}

results_str:  {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted areas", "conmods"], "seed": "True"}
constraints:  {'pattern': 'grid', 'pattern_offset': 1, 'avoid': ['planted areas', 'conmods'], 'seed': True}
building policy...
feedback is none!
Policy:  1. Begin by checking the robot's current location. If the robot is outside the plot bounds, plan and execute the shortest route to move inside the plot bounds.

2. Scan the plot area using the RGB cameras and lidar-inertial odometry system. Identify and mark all conmods and any previously planted areas within the plot. 

3. If there are any uncertainties regarding what the conmods look like or where they might be, ask the user for more information: "I am unsure about the location and appearance of conmods, could you provide more details?"

4. After all conmods and previously planted areas are identified and marked, begin to plan a route in a 1mx1m grid pattern around these objects, ensuring the robot will avoid them as per the given constraints.

5. Before moving, check the immediate path for any obstacles or objects that are marked to be avoided. If any such objects are detected, reroute to avoid them.

6. Execute the movement along the planned route. At each grid point, stop and execute the planting action.

7. As each seed is planted, record the GPS coordinates of the planting location in the system memory.

8. After planting a seed, mark the area as a 'planted area' to be avoided in future route planning.

9. Continue this process, moving along the planned route, stopping at each grid point to plant a seed, recording the planting location, and marking the area as a 'planted area', until the entire plot has been covered as per the grid pattern.

10. Once the entire plot has been covered, stop and send a completion signal to the user: "Task complete: The plot has been seeded in a 1mx1m grid pattern. All planted locations have been recorded in the system memory."

Remember, the robot should always respect the plot bounds, avoid driving over planted areas and conmods, and never leave the plot bounds during this task.
