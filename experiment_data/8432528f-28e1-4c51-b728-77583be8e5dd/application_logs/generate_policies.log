initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/8432528f-28e1-4c51-b728-77583be8e5dd/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"pattern": "grid", "pattern_offset": 1, "avoid": ["previously planted area", "conmods"], "seed": "True"}

results_str:  {"pattern": "grid", "pattern_offset": 1, "avoid": ["previously planted area", "conmods"], "seed": "True"}
constraints: {'pattern': 'grid', 'pattern_offset': 1, 'avoid': ['previously planted area', 'conmods'], 'seed': True} 

building policy...
feedback is none!
Policy:  1. Confirm the robot is within the plot bounds. If not, plan the shortest route to the nearest point inside the plot bounds.

2. Analyze the RGB camera data to recognize landmarks within the environment, focusing on any identified in the 'avoid' list, in this case, 'previously planted areas' and 'conmods'.

3. Use the LIDAR-inertial odometry and GPS to determine the robot's precise location and orientation within the plot.

4. Begin to construct a navigational plan to move in a 1m x 1m grid pattern as specified in the 'pattern' and 'pattern_offset' fields in the constraint dictionary.

5. As part of this plan, ensure that the robot avoids driving over areas identified in the 'avoid' list by incorporating these into the navigational plan.

6. Before moving, cross-reference the navigational plan with the GPS, LIDAR-inertial odometry, and RGB camera data to ensure the path is clear and avoids the specified areas.

7. If the path is clear, proceed to the first point in the grid pattern within the plot bounds.

8. At each grid point, if the 'seed' boolean is True, plant a seed. Record the GPS coordinates of the planted location in system memory to keep track of all the planted locations.

9. After planting a seed, plan the route to the next point in the grid, again ensuring the route does not pass over any 'avoid' areas and previously planted locations.

10. Repeat steps 7-9 until the entire grid within the plot bounds has been covered and seeds have been planted at each grid point.

11. Once all seeds have been planted, store the completed task and all planted locations in system memory for future reference.

12. If at any point, a path cannot be plotted due to the presence of an 'avoid' object, inform the user with a message such as, "I can't find a path due to the presence of {landmark}, where should I look?"

13. If instructed by the user to replan the path, go back to step 4. If no instruction is given, hold the position and await further instruction.
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
Waiting for human response
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
I love it thank you so much you are doing amazing thank you
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
Human response: True
