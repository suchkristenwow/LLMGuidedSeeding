initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/4d4df1d0-0f57-4157-81e2-6d2af8193abd/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted areas", "conmods"], "seed": "True"}

results_str:  {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted areas", "conmods"], "seed": "True"}
constraints:  {'pattern': 'grid', 'pattern_offset': 1, 'avoid': ['planted areas', 'conmods'], 'seed': True}
building policy...
feedback is none!
Policy:  1. First, check the robot's current location against the plot_bounds variable in the system memory to ensure that the robot is inside the operational bounds. 

2. If the robot is outside the plot_bounds, calculate the shortest path into the bounds, avoid any listed obstacles from the 'avoid' entry in the constraint dictionary. Navigate to the plot bounds.

3. If the robot is already within the plot_bounds, proceed to the next step.

4. Check the 'avoid' list in the constraint dictionary. Keep these objects in the robot's system memory to actively avoid them during operation. 

5. Start at one corner of the plot and begin to navigate in a grid pattern with a spacing of 1m x 1m, as per the 'pattern' and 'pattern_offset' entries in the constraint dictionary. 

6. At each grid intersection, if the 'seed' entry in the constraint dictionary is True, perform a check to make sure there are no objects from the 'avoid' list in the immediate vicinity.

7. If there are no 'avoid' objects nearby, proceed to plant a seed at this grid intersection.

8. Log the location of each planted seed into the system memory to ensure these areas are avoided in future movements and tasks.

9. Repeat steps 6-8 until all grid intersections within the plot bounds have been covered.

10. If at any point the robot cannot locate a clear path due to an obstruction from the 'avoid' list, interface with the human operator and request additional directions.

11. After all grid intersections within the plot bounds have been seeded and logged, complete the task. 

12. Report to the user that the task has been completed successfully, and provide the list of planted locations for their reference.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
This looks good to me
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
