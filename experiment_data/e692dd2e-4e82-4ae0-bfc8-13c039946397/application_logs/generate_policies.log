initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/e692dd2e-4e82-4ae0-bfc8-13c039946397/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted area, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Check the initial position of the robot. If the robot is outside the plot bounds, calculate the shortest route to enter the plot bounds. Execute this move if necessary.

2. Once inside the plot bounds, initialize an empty list to store the coordinates of the planted locations. This list will be used to avoid driving over planted areas.

3. Start at one corner of the plot and set the first planting spot at a distance of 1m from the corner along the edge of the plot.

4. Check the planned planting spot for any obstacles listed under the 'avoid' key in the constraint dictionary, which are 'planted area' and 'conmods' in this case.

5. If there is no obstacle, move to the planned planting spot and plant a seed. Add the coordinates of this spot to the list of planted locations.

6. If there is an obstacle, calculate a new planting spot by moving 1m along the plot edge. Repeat steps 4 and 5.

7. After planting at the first spot, calculate the next planting spot by moving 1m along the other edge of the plot to create a grid pattern. Repeat steps 4 and 5.

8. Continue this process until the entire row along one edge of the plot is covered with planted spots spaced 1m apart.

9. Once a row is complete, move 1m along the perpendicular edge of the plot to start a new row. Repeat steps 4 to 8 until the entire plot is covered with a 1mx1m grid of planted spots.

10. If at any point, the robot cannot find a suitable spot to plant due to the presence of 'conmods' or 'planted area', inform the user: "I can't find a suitable spot to plant due to the presence of {obstacle}, where should I look?".

11. Upon receiving directions from the user, adjust the robot's plan accordingly to avoid the indicated obstacles and continue the planting process. 

12. After completing the planting task, store the list of planted locations in the system memory for future reference. 

13. Finally, inform the user that the task of planting in a 1mx1m grid pattern while avoiding 'conmods' and 'planted areas' has been successfully completed.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
g
verifying the policy; this is the llm result: Your message seems incomplete. Could you please provide the full text so I can provide an accurate response?
Updating feedback!
building policy...
{'avoid': 'planted area, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
