initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/9145a6db-69fa-4127-8ef7-c087a2203a43/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"previous_planting_locations, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"previous_planting_locations, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'previous_planting_locations, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Check if the robot's current location is inside the plot bounds. If not, calculate the shortest path to the plot bounds and navigate there.
2. Once inside the plot bounds, initiate a scanning process to create a map of the plot area. Use the RGB cameras to identify landmarks and avoidable objects such as 'previous_planting_locations' and 'conmods'.
3. Overlay a 1m x 1m grid pattern on the generated map to prepare for planting, making sure to adjust for the 'pattern_offset' of 1m specified in the 'constraint_dictionary'.
4. Begin navigating the robot along the grid pattern. If the 'seed' boolean is true, start the seeding operation at each grid intersection.
5. After each seed planting, store the exact location in the system memory. This will help in avoiding these areas in future navigation steps.
6. Continue with the grid navigation and planting process, while always checking for the presence of objects in the 'avoid' list from the constraint dictionary. If an avoidable object is detected, replan the navigation path to go around it while still adhering to the grid pattern.
7. If the robot is unable to locate a landmark from the 'goal_lms' list in the immediate environment, communicate with the user and ask for direction. The message should be: "I can't find {landmark}, where should I look?" 
8. Continue this process until the entire grid has been covered and all seeds have been planted.
9. Once all seeds are planted and the task is completed, inform the user about the completion of the task and provide a summary of all the planted locations stored in the system memory.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
sd
verifying the policy; this is the llm result: Based on the input provided, I cannot determine the user's opinion or suggestion about the policy. The given input 'sd' does not provide any meaningful information. Could you please provide a clear and complete text?
Updating feedback!
building policy...
{'avoid': 'previous_planting_locations, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
