initting the Policy Generator with these arguments:  Namespace(prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/3fa00bff-e27b-4be7-b6f3-302c2394c8bd/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv')
self.settings:  {'prompt_file': '/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', 'waypoint_threshold': 0.5, 'logging_directory': '/home/kristen/LLMGuidedSeeding/experiment_data/', 'commonObj_path': '/home/kristen/LLMGuidedSeeding/configs/commonObjs.txt', 'common_ip': '40.78.49.78', 'robot': {'object_sever_url': 'http://0.0.0.0:5005', 'host_url': 'http://0.0.0.0:5000', 'eps_dbscan': 0.5, 'min_samples': 5, 'median_filter_rate': 2, 'median_filtier_distance_threshold': 0.5, 'waypoint_threshold': 0.5}, 'llm_model': {'model_name': 'openai', 'full_name': 'gpt-3.5-turbo', 'api_env_var': 'openai_key'}, 'vqa_model': {'full_name': 'llava-1.5', 'ip': '0.0.0.0', 'port': 8000, 'temp': 0.8}}
parsing prompt to get constraints ...
llm_result: Based on the prompt given, the relevant constraints and goal landmarks can be structured into the following dictionary format:

```python
{
    "pattern": "grid",
    "pattern_offset": 1.0,
    "avoid": ["planted", "conmods"],
    "seed": "True"
}
```

This format captures the requirement to plant in a 1m x 1m grid in the specified area while avoiding driving over previously planted seeds or any conmods. If the constraints need further clarification or adjustment, please let me know.
results_str:  {
    "pattern": "grid",
    "pattern_offset": 1.0,
    "avoid": ["planted", "conmods"],
    "seed": "True"
}
constraints:  {'pattern': 'grid', 'pattern_offset': 1.0, 'avoid': ['planted', 'conmods'], 'seed': True}
building policy...
Question:  I believe this policy should complete the desired task. What do you think?
1. Start by checking the current location of the robot using lidar-inertial odometry and GPS to ensure it is within the plot bounds.
2. If the robot is not within the plot bounds, plan the shortest route possible to move it inside the bounds without violating the constraints.
3. Begin scanning the environment using the RGB cameras to identify any existing planted areas or conmods (construction modules) to avoid them during planting.
4. Locate the nearest landmark that matches the "goal_lms" criteria, which in this case is not specified but assume it's a general reference point for grid planting.
5. Begin planting seeds in a 1mx1m grid pattern, starting from the current location or the identified landmark, depending on which is closer.
6. Ensure that the robot maintains a distance of 1m between each planted seed to adhere to the grid pattern constraint.
7. Continuously update the robot's position and adjust the planting strategy accordingly to cover the entire bounded area efficiently.
8. While planting, consistently check for any obstacles or areas where seeds have already been planted to avoid driving over them.
9. If at any point there is uncertainty about the location of a landmark or if additional guidance is needed, prompt the user with "I can't find {landmark}, where should I look?" for clarification.
10. Once the entire bounded area has been covered in a 1mx1m grid pattern with seeds planted while avoiding planted areas and conmods, the task is successfully completed.
Found a valid policy approved by the human!
