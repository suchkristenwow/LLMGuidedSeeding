initting the Policy Generator with these arguments:  Namespace(prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/fbb76adc-d767-4927-91be-77fd6e2a3ec4/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv')
self.settings:  {'prompt_file': '/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', 'waypoint_threshold': 0.5, 'logging_directory': '/home/kristen/LLMGuidedSeeding/experiment_data/', 'commonObj_path': '/home/kristen/LLMGuidedSeeding/configs/commonObjs.txt', 'common_ip': '40.78.49.78', 'robot': {'object_sever_url': 'http://0.0.0.0:5005', 'host_url': 'http://0.0.0.0:5000', 'eps_dbscan': 0.5, 'min_samples': 5, 'median_filter_rate': 2, 'median_filtier_distance_threshold': 0.5, 'waypoint_threshold': 0.5}, 'llm_model': {'model_name': 'openai', 'full_name': 'gpt-3.5-turbo', 'api_env_var': 'openai_key'}, 'vqa_model': {'full_name': 'llava-1.5', 'ip': '0.0.0.0', 'port': 8000, 'temp': 0.8}}
parsing prompt to get constraints ...
llm_result: Based on the prompt provided, the relevant constraints and goal landmarks can be formatted into a dictionary as follows:

```python
{
    "goal_lms": "bounded_area",
    "pattern": "grid",
    "pattern_offset": 1.0,
    "avoid": ["planted_area", "conmods"],
    "seed": "True"
}
```

This dictionary captures the constraints to plant in a 1m x 1m grid within the bounded area, avoid driving over the planted seeds or any conmods, and indicates that the robot should plant seeds.

If this format does not align with the specific requirements of the prompt, please let me know so I can provide further assistance.
results_str:  {
    "goal_lms": "bounded_area",
    "pattern": "grid",
    "pattern_offset": 1.0,
    "avoid": ["planted_area", "conmods"],
    "seed": "True"
}
constraints:  {'goal_lms': 'bounded_area', 'pattern': 'grid', 'pattern_offset': 1.0, 'avoid': ['planted_area', 'conmods'], 'seed': True}
building policy...
I dont know what b is. Ill have to ask.
I dont know what o is. Ill have to ask.
I dont know what u is. Ill have to ask.
I dont know what n is. Ill have to ask.
I dont know what d is. Ill have to ask.
I dont know what e is. Ill have to ask.
I dont know what d is. Ill have to ask.
I dont know what _ is. Ill have to ask.
I dont know what a is. Ill have to ask.
I dont know what r is. Ill have to ask.
I dont know what e is. Ill have to ask.
I dont know what a is. Ill have to ask.
I dont know what planted_area is. Ill have to ask.
I dont know what conmods is. Ill have to ask.
llm_result:  1. Determine the current position of the robot within the plot bounds using lidar-inertial odometry and GPS localization.
2. Check if there are any obstacles such as previously planted areas or conmods (construction modules) in the immediate vicinity that need to be avoided.
3. Begin planning the shortest route to enter the bounded area if the robot is currently outside the plot bounds.
4. Start scanning the environment using RGB cameras to locate the "bounded_area" landmark within the plot.
5. If the "bounded_area" landmark is not immediately visible, prompt the user: "I can't find the bounded area, where should I look?"
6. Once the "bounded_area" landmark is identified, start planting seeds in a 1mx1m grid pattern within the bounded area.
7. Ensure that the robot avoids driving over any previously planted areas or conmods while moving in the grid pattern.
8. Continuously monitor the robot's position and adjust its trajectory to maintain the 1mx1m grid pattern while planting seeds.
9. Complete the task of planting seeds in the 1mx1m grid pattern within the bounded area while adhering to the avoidance constraints specified in the constraint dictionary.
