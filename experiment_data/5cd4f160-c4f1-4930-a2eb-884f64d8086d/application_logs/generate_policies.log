initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/5cd4f160-c4f1-4930-a2eb-884f64d8086d/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

Failed to connect to WebSocket server: Handshake status 404 NOT FOUND -+-+- {'server': 'Werkzeug/3.0.2 Python/3.8.10', 'date': 'Sat, 08 Jun 2024 16:51:29 GMT', 'content-type': 'text/html; charset=utf-8', 'content-length': '207', 'access-control-allow-origin': 'http://127.0.0.1:5000', 'vary': 'Origin', 'connection': 'close'} -+-+- b'<!doctype html>\n<html lang=en>\n<title>404 Not Found</title>\n<h1>Not Found</h1>\n<p>The requested URL was not found on the server. If you entered the URL manually please check your spelling and try again.</p>\n'
parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'previously planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Check if the robot is located within the 'plot_bounds'. If not, plan the shortest path to the nearest point within the bounds and move there.
2. Use the RGB cameras to get an image of the surroundings.
3. Use the GPS and lidar-inertial odometry to get the exact location of the robot.
4. Start creating a grid pattern within the plot bounds with each grid cell of size 1m x 1m as defined by the 'pattern_offset' in the constraints.
5. Initiate a list in the system memory to keep track of all planted locations.
6. Navigate to the first cell in the grid pattern without entering any previously planted areas or areas containing 'conmods', as defined in the 'avoid' list.
7. Once in the correct grid cell, activate the seed planting mechanism to plant a seed.
8. Record the current location in the planted locations list.
9. Repeat steps 6-8 for all cells in the grid pattern, avoiding all objects listed in the 'avoid' list.
10. If an object from the 'avoid' list is encountered and the robot cannot find a safe path to the next grid cell, inform the human user: "I can't find a safe path to the next grid cell due to an object I must avoid. Where should I go?"
11. Continue this process until all grid cells within the plot bounds have been visited and seeded.
12. Once complete, provide the user with the list of all planted locations and a summary of the task, including any challenges or obstacles encountered.
Question: I believe this policy should complete the desired task. What do you think?
1. Check if the robot is located within the 'plot_bounds'. If not, plan the shortest path to the nearest point within the bounds and move there.
2. Use the RGB cameras to get an image of the surroundings.
3. Use the GPS and lidar-inertial odometry to get the exact location of the robot.
4. Start creating a grid pattern within the plot bounds with each grid cell of size 1m x 1m as defined by the 'pattern_offset' in the constraints.
5. Initiate a list in the system memory to keep track of all planted locations.
6. Navigate to the first cell in the grid pattern without entering any previously planted areas or areas containing 'conmods', as defined in the 'avoid' list.
7. Once in the correct grid cell, activate the seed planting mechanism to plant a seed.
8. Record the current location in the planted locations list.
9. Repeat steps 6-8 for all cells in the grid pattern, avoiding all objects listed in the 'avoid' list.
10. If an object from the 'avoid' list is encountered and the robot cannot find a safe path to the next grid cell, inform the human user: "I can't find a safe path to the next grid cell due to an object I must avoid. Where should I go?"
11. Continue this process until all grid cells within the plot bounds have been visited and seeded.
12. Once complete, provide the user with the list of all planted locations and a summary of the task, including any challenges or obstacles encountered. 

