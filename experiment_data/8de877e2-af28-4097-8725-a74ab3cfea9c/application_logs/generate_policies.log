initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/8de877e2-af28-4097-8725-a74ab3cfea9c/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Verify current position relative to the operational plot bounds. If the robot is outside the operational plot bounds, plan and navigate the shortest route inside the plot.
2. Initialize a list in the system memory to store all the planted locations.
3. Establish a 1mx1m grid pattern within the operational bounds, adhering to the 'pattern_offset' constraint from the dictionary.
4. Start at the closest grid intersection from the current robot's position.
5. Enable the RGB cameras and lidar-inertial odometry system to continuously observe and detect landmarks such as already planted areas and conmods.
6. If a planned grid intersection is already planted or a conmod is detected, update the list of planted locations and find the next nearest unplanted grid intersection.
7. Navigate to the selected grid intersection while avoiding all detected objects on the 'avoid' list, making sure not to drive over them.
8. Upon reaching the destination, plant a seed, update the list of planted locations in the system memory, and mark this grid intersection as 'planted'.
9. Repeat steps 5 through 8 for all grid intersections within the operational bounds.
10. If all grid intersections within the operational bounds have been covered and planted, signal completion of the task. If not, go back to step 5.
11. If during navigation, the robot can't find its way around an obstacle or can't find the next grid intersection, inform the user by saying "I can't find my way around {obstacle} or can't locate the next grid intersection, where should I look?" and await further instructions.
12. Keep a constant check on the robot's position relative to the operational plot bounds during the entire operation to ensure it does not drive outside of them.
13. If the robot accidentally moves out of the operational plot bounds, inform the user, and plan the shortest route back inside the plot.
14. Continue with the operation until all grid intersections are planted, or until receiving a stop command from the user.
Question:  I believe this policy should complete the desired task. What do you think?
1. Verify current position relative to the operational plot bounds. If the robot is outside the operational plot bounds, plan and navigate the shortest route inside the plot.
2. Initialize a list in the system memory to store all the planted locations.
3. Establish a 1mx1m grid pattern within the operational bounds, adhering to the 'pattern_offset' constraint from the dictionary.
4. Start at the closest grid intersection from the current robot's position.
5. Enable the RGB cameras and lidar-inertial odometry system to continuously observe and detect landmarks such as already planted areas and conmods.
6. If a planned grid intersection is already planted or a conmod is detected, update the list of planted locations and find the next nearest unplanted grid intersection.
7. Navigate to the selected grid intersection while avoiding all detected objects on the 'avoid' list, making sure not to drive over them.
8. Upon reaching the destination, plant a seed, update the list of planted locations in the system memory, and mark this grid intersection as 'planted'.
9. Repeat steps 5 through 8 for all grid intersections within the operational bounds.
10. If all grid intersections within the operational bounds have been covered and planted, signal completion of the task. If not, go back to step 5.
11. If during navigation, the robot can't find its way around an obstacle or can't find the next grid intersection, inform the user by saying "I can't find my way around {obstacle} or can't locate the next grid intersection, where should I look?" and await further instructions.
12. Keep a constant check on the robot's position relative to the operational plot bounds during the entire operation to ensure it does not drive outside of them.
13. If the robot accidentally moves out of the operational plot bounds, inform the user, and plan the shortest route back inside the plot.
14. Continue with the operation until all grid intersections are planted, or until receiving a stop command from the user.
Feedback sent to backend successfully! 

Feedback: 