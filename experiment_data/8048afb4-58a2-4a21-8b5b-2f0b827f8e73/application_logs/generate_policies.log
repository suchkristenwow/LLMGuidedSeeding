initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/8048afb4-58a2-4a21-8b5b-2f0b827f8e73/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'previously planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. First, use the robot's GPS and lidar-inertial odometry to verify the current location of the robot. If the robot is outside the plot bounds, plan the shortest path to move inside the bounds.
2. With the robot's RGB cameras, observe the environment to identify any landmarks which are to be avoided such as "previously planted areas" and "conmods" as per the constraint dictionary.
3. Calculate the grid pattern with 1m offset as specified in the "pattern_offset" in the constraint dictionary. Ensure the grid pattern fits within the plot bounds and does not overlap with any of the avoidable landmarks.
4. Begin navigation along the first row of the grid. During this process, continuously monitor the immediate environment using the RGB cameras to ensure there are no avoidable landmarks in the robot's path. 
5. Once the robot reaches the first point on the grid, prepare to plant a seed. Confirm that the location doesn't overlap with any "avoid" landmarks.
6. If the location is clear, plant the seed and update the list of "previously planted areas" in the system memory.
7. If the location is not clear, find the next closest location on the grid that is clear of avoidable landmarks and navigate to that location.
8. Repeat steps 5 to 7 until the entire grid has been covered and seeds have been planted in all appropriate locations.
9. If during navigation or planting, a goal landmark cannot be found or identified, inform the user with a message "I can't find {landmark}, where should I look?" and wait for further instruction.
10. Once all seeds have been planted, return the robot to the starting location or a designated endpoint, making sure to avoid all "avoid" landmarks.
11. Lastly, provide a summary of the operation, including a map of all planted locations and any obstacles that were encountered and avoided.
Feedback: 