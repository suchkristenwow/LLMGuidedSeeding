initting the Policy Generator with these arguments: 
Namespace(config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/f0d89218-0348-489a-8cbd-2750f36c37d3/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv', prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid": "planted area, conmods", "pattern": "grid", "pattern_offset": "1", "seed": "True"}

results_str:  {"avoid": "planted area, conmods", "pattern": "grid", "pattern_offset": "1", "seed": "True"}
constraints: {'avoid': 'planted area, conmods', 'pattern': 'grid', 'pattern_offset': '1', 'seed': True} 

building policy...
feedback is none!
Policy:  1. Initialize a list in the system memory to keep track of the areas where the robot has planted seeds. This will be known as the "planted_areas" list.
2. Check the robot's current position. If the robot is outside the defined "plot_bounds", plan the shortest route possible to get inside the plot bounds.
3. Once inside the plot bounds, use the robot's RGB cameras and lidar-inertial odometry to observe the environment and identify any 'conmods' to be avoided.
4. Begin implementing the grid pattern for planting, using 1m x 1m spacing as defined by the "pattern_offset" in the constraint dictionary.
5. As each grid point is reached, check the "planted_areas" list to ensure the robot has not already planted in that location. If the location is clear, proceed to step 6. If not, move to the next grid point.
6. Also cross-check the location with the list of identified 'conmods' to avoid. If the location is clear, proceed to step 7. If a 'conmod' is detected, move to the next grid point.
7. Plant a seed at the current location. 
8. Add the current location to the "planted_areas" list in the system memory.
9. Use the GPS and lidar-inertial odometry to move to the next point on the grid, avoiding any locations where seeds have been planted and any identified 'conmods'.
10. Repeat steps 5 through 9 until all grid points within the plot bounds have been addressed.
11. Once the task is completed, alert the user with a message: "Task Completed: All feasible grid points within the plot have been planted with seeds."
12. Standby for the next set of instructions.
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
Waiting for human response from backend
