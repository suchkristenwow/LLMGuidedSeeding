initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/b9c7b03f-13ff-4542-982f-2e3fef4ea586/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid": "planted areas, conmods", "pattern": "grid", "pattern_offset": 1, "seed": "True"}

results_str:  {"avoid": "planted areas, conmods", "pattern": "grid", "pattern_offset": 1, "seed": "True"}
constraints:  {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Verify the robot's initial location. If it's outside the plot bounds, identify the shortest route into the bounds and move the robot accordingly. 

2. Observe the surroundings using the RGB camera to recognize the 'planted areas' and 'conmods' that need to be avoided as per the constraint dictionary. 

3. Using lidar-inertial odometry and GPS, maintain a real-time position of the robot within the plot bounds.

4. Start the seeding process following the 'grid' pattern as per the constraint dictionary. 

5. Move the robot to the starting point of the plot, and initiate the planting of seeds. Record the position of the first planted area in the system memory.

6. Using the 'pattern_offset' of 1m from the constraint dictionary, move the robot 1m from the first planted area, following the grid pattern, avoiding 'planted areas' and 'conmods' as per the constraints.

7. Plant the seeds at the new position and add the new planting location to the system memory.

8. Repeat steps 6 and 7 until the robot has covered the entire plot following the 'grid' pattern, ensuring it avoids 'planted areas' and 'conmods'.

9. If at any point the robot is unable to find a clear path due to 'planted areas' or 'conmods', request assistance from the user with the message: "I can't find a clear path, where should I look?"

10. Once the task is completed, confirm completion with the user, and provide them with the list of all planted locations from the system memory. 

11. Standby for further instructions.
Feedback: Received message from backend: I LOVE IT SOO MUCH

enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
Looiks good
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
Human response: I LOVE IT SOO MUCH

