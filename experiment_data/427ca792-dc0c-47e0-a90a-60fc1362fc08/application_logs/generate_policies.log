initting the Policy Generator with these arguments:  Namespace(prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/427ca792-dc0c-47e0-a90a-60fc1362fc08/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv')
self.settings:  {'prompt_file': '/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', 'waypoint_threshold': 0.5, 'logging_directory': '/home/kristen/LLMGuidedSeeding/experiment_data/', 'commonObj_path': '/home/kristen/LLMGuidedSeeding/configs/commonObjs.txt', 'common_ip': '40.78.49.78', 'robot': {'object_sever_url': 'http://0.0.0.0:5005', 'host_url': 'http://0.0.0.0:5000', 'eps_dbscan': 0.5, 'min_samples': 5, 'median_filter_rate': 2, 'median_filtier_distance_threshold': 0.5, 'waypoint_threshold': 0.5}, 'llm_model': {'model_name': 'openai', 'full_name': 'gpt-3.5-turbo', 'api_env_var': 'openai_key'}, 'vqa_model': {'full_name': 'llava-1.5', 'ip': '0.0.0.0', 'port': 8000, 'temp': 0.8}}
parsing prompt to get constraints ...
llm_result: Based on the prompt provided, we can structure the relevant constraints and goal landmarks into a dictionary format as follows:

```python
{
    "goal_lms": ["conmods"],
    "avoid": "True",
    "pattern": "grid",
    "pattern_offset": 1.0,
    "seed": "True"
}
```

This dictionary outlines the constraints and goal landmarks for the robotic agent to plant in a 1mx1m grid within the bounded area, avoiding driving over the planted areas or any conmods.
results_str:  {
    "goal_lms": ["conmods"],
    "avoid": "True",
    "pattern": "grid",
    "pattern_offset": 1.0,
    "seed": "True"
}
constraints:  {'goal_lms': ['conmods'], 'avoid': 'True', 'pattern': 'grid', 'pattern_offset': 1.0, 'seed': True}
building policy...
self.feedback: None
self.policy: None
Question:  I believe this policy should complete the desired task. What do you think?
1. Begin by checking the current location of the robot within the plot bounds using lidar-inertial odometry and GPS.
2. If the robot is outside of the plot bounds, plan the shortest route to move inside the bounds without crossing any boundaries.
3. Once inside the plot bounds, start scanning the environment using the RGB cameras to locate any conmods (constraint-modifying objects) within the area.
4. If there are conmods present, notify the user that the robot has found them and ask for further instructions on how to handle them.
5. Begin planting seeds in a 1m x 1m grid pattern within the bounded area, ensuring each seed is placed at the specified pattern offset of 1.0m.
6. While planting, use the RGB cameras to avoid driving over any areas where seeds have already been planted or where conmods are located.
7. Continuously update the robot's localization within the plot bounds to ensure accurate planting and avoidance of previously planted areas or conmods.
8. Complete planting seeds in the designated grid pattern while adhering to the constraints of avoiding previously planted areas and conmods.
9. Once the planting task is completed, notify the user that the robot has finished planting in the 1m x 1m grid pattern while avoiding the specified areas.
Feedback: 