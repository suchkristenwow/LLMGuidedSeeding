initting the Policy Generator with these arguments:  Namespace(prompt_path='/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', config_path='/home/kristen/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/kristen/LLMGuidedSeeding/experiment_data/4c5a599c-3256-4866-9a18-06b5c7031969/policy_generation_logs', plot_bounds_path='/home/kristen/LLMGuidedSeeding/random_path.csv')
self.settings:  {'prompt_file': '/home/kristen/LLMGuidedSeeding/prompts/ex_query.txt', 'waypoint_threshold': 0.5, 'logging_directory': '/home/kristen/LLMGuidedSeeding/experiment_data/', 'commonObj_path': '/home/kristen/LLMGuidedSeeding/configs/commonObjs.txt', 'common_ip': '40.78.49.78', 'robot': {'object_sever_url': 'http://0.0.0.0:5005', 'host_url': 'http://0.0.0.0:5000', 'eps_dbscan': 0.5, 'min_samples': 5, 'median_filter_rate': 2, 'median_filtier_distance_threshold': 0.5, 'waypoint_threshold': 0.5}, 'llm_model': {'model_name': 'openai', 'full_name': 'gpt-3.5-turbo', 'api_env_var': 'openai_key'}, 'vqa_model': {'full_name': 'llava-1.5', 'ip': '0.0.0.0', 'port': 8000, 'temp': 0.8}}
parsing prompt to get constraints ...
llm_result: Based on the prompt provided, the constraints can be categorized as follows:

{"pattern": "grid", "pattern_offset": 1.0, "avoid": ["planted", "conmods"], "seed": "True"}

This dictionary format captures the necessary constraints for the robotic agent to execute the task of planting seeds in a 1m x 1m grid within the bounded area while avoiding driving over areas where seeds have been planted or any conmods (conditional modules).
results_str:  {"pattern": "grid", "pattern_offset": 1.0, "avoid": ["planted", "conmods"], "seed": "True"}
constraints:  {'pattern': 'grid', 'pattern_offset': 1.0, 'avoid': ['planted', 'conmods'], 'seed': True}
building policy...
Question:  I believe this policy should complete the desired task. What do you think?
1. Check current location using lidar-inertial odometry and GPS to ensure the robot is within the plot bounds.
2. Begin scanning the immediate environment using RGB cameras to identify any landmarks of interest, specifically "conmods" and areas where seeds have been previously planted.
3. If a "conmods" landmark is not immediately visible, ask the user for guidance: "I can't find any conmods, where should I look?"
4. Start planning a route to the nearest unseeded location within the plot bounds to begin planting seeds in a 1mx1m grid pattern.
5. Once a suitable location is identified, position the robot and plant a seed.
6. Check the surroundings for any obstacles or previously planted seeds to avoid driving over them.
7. Continue planting seeds in a grid pattern, maintaining a 1m distance between each seed.
8. Periodically reassess the location using lidar-inertial odometry and GPS to ensure the robot remains within the plot bounds.
9. If any issues arise or further guidance is needed, communicate with the user for assistance.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise. 

This policy isn't quite what I wanted. The planted areas are just the areas immediately around where you already planted. So at the beginning, there is nothing to avoid. You should keep track of where you've planted 
Found a valid policy approved by the human!
