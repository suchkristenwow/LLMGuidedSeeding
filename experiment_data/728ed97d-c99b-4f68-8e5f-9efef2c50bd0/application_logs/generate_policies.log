initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/728ed97d-c99b-4f68-8e5f-9efef2c50bd0/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted area", "conmods"], "seed": "True"}

results_str:  {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted area", "conmods"], "seed": "True"}
constraints:  {'pattern': 'grid', 'pattern_offset': 1, 'avoid': ['planted area', 'conmods'], 'seed': True}
building policy...
feedback is none!
Policy:  1. Validate the robot's position. If it is outside the defined 'plot_bounds', plan and execute the shortest path to move inside the bounds.

2. Scan the immediate environment using the robot's RGB cameras to locate any 'conmods' or previously 'planted areas' to avoid. Map out these areas in the system memory.

3. Also scan for landmarks using the RGB cameras to form a mental map of the operational area.

4. With the mapped information, plan out a 1mx1m grid pattern for planting inside the 'plot_bounds', avoiding 'conmods' and 'planted areas'. 

5. If an obstacle from the 'avoid' list is found while planning the grid, adjust the pattern to circumvent the obstacle while maintaining the grid's integrity as much as possible.

6. Start at one corner of the grid, move to the first grid point. Check the immediate surroundings for 'conmods' or 'planted areas'. 

7. If the point is clear, proceed to plant a seed and save the planted location in the system memory.

8. Move to the next point in the grid by navigating 1m away horizontally. If the end of the row is reached, move 1m vertically to the next row and continue the process.

9. Continue this process until all grid points within the 'plot_bounds' have been covered, always avoiding 'conmods' and 'planted areas'.

10. After completing the task, update the 'planted area' in the system memory with the new planting locations to reflect the current state of the plot.

11. If any unexpected obstacles or difficulties are encountered during this process, inform the human user and ask for further instructions. 

12. Once the task is completed, send a completion report to the user, including a list of all the planted locations and any deviations from the original plan, if any.
Feedback: 