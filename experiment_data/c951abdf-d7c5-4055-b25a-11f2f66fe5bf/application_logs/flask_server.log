 * Serving Flask app 'app'
 * Debug mode: on
Received message: I believe this policy should complete the desired task. What do you think?
1. Initialize an empty list to store the locations where seeds have been planted. 
2. Verify the current location using the onboard lidar-inertial odometry and GPS system. 
3. If the robot is outside the plot_bounds, use the navigation system to plan the shortest route inside the bounds.
4. Once inside the plot bounds, begin to implement the planting strategy according to the 'grid' pattern with a 'pattern_offset' of 1m specified in the constraint dictionary.
5. Start at one corner of the plot and move along the first row of the grid, ensuring the robot is 1m apart from the next point in the grid where the seed will be planted. 
6. Plant the seed at the specified location and add this point to the 'planted locations' list. 
7. Move to the next location in the grid, making sure to avoid any areas that have been planted and any 'conmods' present in the area.
8. If the robot encounters a 'planted area' or 'conmods' that it needs to avoid, plan a route around the obstacle, ensuring to stay within the plot bounds.
9. Continue this process of moving to the next location in the grid, planting seeds, and updating the 'planted locations' list until the entire grid within the plot bounds has been covered.
10. If there are any issues with locating the next point in the grid or avoiding obstacles, request assistance from the user for further direction. 
11. Once all seeds have been planted, confirm task completion to the user and provide the 'planted locations' list for reference. 

