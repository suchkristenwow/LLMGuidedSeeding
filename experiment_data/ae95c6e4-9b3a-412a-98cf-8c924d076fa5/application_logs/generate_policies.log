initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/ae95c6e4-9b3a-412a-98cf-8c924d076fa5/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted area", "conmods"], "seed": "True"}

results_str:  {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted area", "conmods"], "seed": "True"}
constraints:  {'pattern': 'grid', 'pattern_offset': 1, 'avoid': ['planted area', 'conmods'], 'seed': True}
building policy...
feedback is none!
Policy:  1. Initialize the list in system memory to keep track of all planted locations.
2. Using the camera, scan the environment to identify and map any 'conmods' and previously 'planted areas' that are to be avoided. Add these areas to the system's avoid list. 
3. Check the robot's current position using the lidar-inertial odometry and GPS.
4. If the robot's current position is outside the plot bounds, plan the shortest route to move inside the plot bounds without crossing any areas in the avoid list.
5. Once inside the plot bounds, use the RGB cameras to identify and map landmarks, focusing on identifying any that match 'conmods' or 'planted areas'.
6. If there is any uncertainty in locating these objects, interface with the human operator asking "I can't find {landmark}, where should I look?".
7. Begin the seeding process by moving to the nearest unseeded location based on the 'grid' pattern with 'pattern_offset' of 1m. Move in such a way to avoid any objects on the avoid list. 
8. Plant a seed at this location and add the coordinate to the system's list of planted locations.
9. Repeat steps 7 and 8 until the entire plot within the bounds has been covered following the 'grid' pattern.
10. Once all the seeds are planted as per the grid pattern, stop the operation. Notify the human operator that the task has been completed. 
11. Save and update the list of planted locations in the system memory for future reference.
12. Standby for further instructions.
Feedback: 