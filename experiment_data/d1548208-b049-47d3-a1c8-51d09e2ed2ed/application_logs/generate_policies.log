initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/d1548208-b049-47d3-a1c8-51d09e2ed2ed/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Start by scanning the current location and surroundings using the RGB cameras and lidar-inertial odometry to get a clear understanding of the environment. Ensure that the robot is within the plot bounds. If the robot starts outside of the plot bounds, plan the shortest route to move inside the bounds.

2. Once inside the bounds, begin by identifying any obstacles (such as 'planted areas' or 'conmods') to be avoided as specified in the 'avoid' key of the constraint dictionary. Create a list of these obstacles in the system memory.

3. Generate a grid with a spacing of 1m x 1m (as given in 'pattern_offset') within the plot bounds. This grid will guide the planting pattern.

4. Start from the current position, and move to the closest unvisited grid point. The path planning should be done in such a way that the robot avoids the obstacles listed in the system memory.

5. Upon reaching a grid point, use the seed planting mechanism to plant a seed. Add this planted grid point to the 'planted areas' list in the system memory.

6. Continue to the next closest unvisited grid point by again planning a path that avoids obstacles. Repeat step 5.

7. If the robot encounters a grid point that is unidentifiable or obstructed by a landmark, inform the user: "I can't find the grid point, where should I look?"

8. Continue this process until all grid points within the plot bounds have been visited and seeds have been planted as per the pattern.

9. Once all grid points have been visited and planted, the task is completed. Inform the user that the task is complete and provide a list of all the planted locations. 

10. Standby for further instructions or tasks.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
Fine with me
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
