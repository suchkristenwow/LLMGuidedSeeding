 * Serving Flask app 'app'
 * Debug mode: on
Received message: I believe this policy should complete the desired task. What do you think?
1. Activate the localization system using lidar-inertial odometry and GPS to determine the current position of the robot. Verify if the robot is within the operational bounds defined by "plot_bounds". 
2. If the robot is outside the bounds, calculate the shortest route to enter the bounds without violating any constraints given in the 'avoid' list from the constraint dictionary. Move the robot along the calculated path.
3. Once inside the bounds, start observing for landmarks using the RGB cameras. Identify 'planted areas' and 'conmods' to avoid. 
4. Begin generating a grid pattern inside the plot_bounds, taking 'pattern_offset' as 1m into consideration. The grid should avoid all 'planted areas' and 'conmods'. 
5. For each point in the grid, check if it's in a 'planted area' or near a 'conmod'. If not, go ahead with the planting operation.
6. Once at a grid point, perform the seeding operation if 'seed' is set to True in the constraint dictionary.
7. Store the location of the planted area in the system memory.
8. Move on to the next point in the grid while avoiding 'planted areas' and 'conmods'.
9. Repeat steps 5 to 8 for all points in the grid.
10. Once all points on the grid have been covered, stop the planting operation.
11. Inform the user once the task is complete.
12. If during any of the above steps, a required landmark or condition cannot be found or met, interface with the user for more directions or context. For instance, if a 'conmod' is not located, ask the user "I can't find the conmod, where should I look?" 
13. Always ensure the robot is within the bounds of the plot and adjust its path if it's about to leave the bounds. 

2024-06-19 15:14:27,406 - WARNING -  * Debugger is active!
2024-06-19 15:14:27,407 - INFO -  * Debugger PIN: 731-273-360
2024-06-19 15:16:30,648 - WARNING -  * Debugger is active!
2024-06-19 15:16:30,648 - INFO -  * Debugger PIN: 731-273-360
