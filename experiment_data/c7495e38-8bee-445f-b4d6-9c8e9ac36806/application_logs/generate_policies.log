initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/c7495e38-8bee-445f-b4d6-9c8e9ac36806/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods", "pattern":"grid", "pattern_offset":1, "seed":"True"}

results_str:  {"avoid":"planted areas, conmods", "pattern":"grid", "pattern_offset":1, "seed":"True"}
constraints: {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True} 

building policy...
feedback is none!
Policy:  1. Check the current location of the robot using its localization capabilities. 
2. If the robot is outside the 'plot_bounds', plan and navigate the shortest path to enter the plot without crossing any conmods and previously planted areas.
3. Once inside the plot bounds, start by identifying the location of any conmods and previously planted areas that need to be avoided, using the robot's RGB cameras.
4. Record the locations of these conmods and planted areas in the system memory for reference.
5. Begin executing the 'grid' pattern for planting seeds as specified in the constraints dictionary. 
6. For each grid point calculated, check if it lies within a safe distance (not within 1m) of any conmod or planted area. If it does, move to the next grid point. 
7. If the grid point is safe, navigate to that location without driving over any conmods or planted areas.
8. Once reached the location, plant a seed there and add this location to the list of planted areas in the system memory.
9. Repeat steps 6 to 8 for all points in the grid within the plot bounds until all viable seeds are planted.
10. If at any point, the robot is unable to locate a safe grid point within the plot bounds, inform the user "I can't find a safe location to plant a seed, where should I look?" and wait for further instructions.
11. Once all the seeds are planted or the user has given further instructions, stop the planting procedure.
12. Return to the start point or the point instructed by the user, again avoiding conmods and planted areas.
13. Update the user on the completion of the task along with the final list of planted locations.
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
That'll do pig that'll do
verifying the policy; this is the llm result: The text you provided doesn't give clear feedback about a policy, nor does it suggest any changes. It's a quote from a movie and doesn't provide context to ascertain approval or disapproval. Thus, the user's stance on the policy cannot be determined. I need more information to provide an accurate answer.
Updating feedback!
feedback:  That'll do pig that'll do
building policy...
{'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
