initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/52b5c155-dc98-422a-9961-3100bb038b2b/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  Here's a step-by-step policy that the robot can follow to accomplish the given task:

1. Check the current position of the robot using lidar-inertial odometry and GPS to confirm whether it's within the operational bounds defined by the 'plot_bounds' variable. 

2. If the robot is outside the plot bounds, calculate the shortest route to enter the bounds, ensuring it avoids any pre-defined 'avoid' areas such as "planted areas" and "conmods" (construction materials).

3. Once within the bounds, initialize a list in the system memory to keep track of planted locations. 

4. Begin scanning the immediate environment using the robot's RGB cameras, identifying any landmarks that are within the 'avoid' category, such as "planted areas" and "conmods".

5. Create a 1m x 1m grid pattern inside the operational bounds, making sure to exclude any areas that contain 'avoid' landmarks.

6. Begin at the first point in the grid pattern. Before moving to each new point, check whether it's an 'avoid' landmark. If it is, skip this point and move on to the next one in the pattern. 

7. Once at a valid point in the grid, proceed with the planting operation if the 'seed' boolean is set to True. 

8. Add the current location to the list of planted locations in the system memory. 

9. Repeat steps 6-8 for all points in the grid pattern until the entire area has been covered.

10. If at any point the robot is unable to locate a point within the grid pattern due to an 'avoid' landmark, communicate with the human user for further directions by saying "I can't find {grid point}, where should I look?"

11. Once all points in the grid have been visited and any required planting operations have been completed, return to the starting position. 

12. If 'seed' is set to True, provide a final report to the user indicating all the locations where planting was performed.

Please note: This policy ensures that the robot doesn't drive over planted areas or any construction materials (conmods), and seeds are planted in a 1m x 1m grid pattern within the operational bounds. The robot also communicates with the human user if it encounters any uncertainties, ensuring efficient and accurate task execution.
Feedback: 