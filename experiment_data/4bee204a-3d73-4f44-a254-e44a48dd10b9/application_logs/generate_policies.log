initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/4bee204a-3d73-4f44-a254-e44a48dd10b9/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"previously planted areas, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'previously planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. Initialize the current position of the robot as the starting point and create an empty list to keep track of all planted locations.
2. Confirm the robot's current position is within the 'plot_bounds'. If not, calculate the shortest route to enter the 'plot_bounds'.
3. Using the RGB cameras, scan the environment to identify any 'conmods' or previously planted areas that need to be avoided. 
4. Check if the robot is currently in an area that should be avoided, as listed in the 'avoid' key of the constraint_dictionary. If so, replan the route to move away from the avoidable area.
5. Once inside the plot and not in an avoidable area, use the 'pattern', 'pattern_offset', and 'seed' values from the constraint_dictionary to guide the planting process.
6. Based on the 'grid' pattern, calculate the next planting location maintaining a distance of 1m (given by 'pattern_offset') from the current location in both the x and y directions. 
7. Move to the calculated location, ensuring to avoid any 'conmods' or previously planted areas.
8. Once reached, if 'seed' is true, plant a seed at this location and add this location to the list of planted locations.
9. Continue steps 6-8, moving in a 'grid' pattern across the 'plot_bounds', until the entire plot has been covered. 
10. If the robot encounters a 'conmod' or previously planted area which is not avoidable while following the 'grid' pattern, notify the user and request for additional instructions.
11. Once all points on the grid within the 'plot_bounds' have been planted, stop the robot and save the list of all planted locations for future reference. Notify the user that the task has been completed.
12. Maintain the robot's readiness for any additional tasks or instructions from the user.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
cool
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
Human response: None
