initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/0d698749-1b09-485d-b59a-7a7df91eef25/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid": "planted areas, conmods", "pattern": "grid", "pattern_offset": 1, "seed": "True"}

results_str:  {"avoid": "planted areas, conmods", "pattern": "grid", "pattern_offset": 1, "seed": "True"}
constraints: {'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True} 

building policy...
feedback is none!
Policy:  1. Check the current robot location with respect to the plot bounds. If the robot is outside the bounds, calculate the shortest path to the inside of the bounds.

2. Update the system memory to mark the current location as the starting point.

3. Identify the direction for the grid pattern to ensure a 1mx1m grid will fit within the plot bounds. The direction can be north-south, or east-west, depending on the shape and size of the plot.

4. Start a loop for the planting task.

5. Within the loop, initiate a seed-planting procedure at the current location. 

6. Update the system memory with the current location as a "planted area".

7. Check for any "avoid" landmarks or objects such as "conmods" or "planted areas" in the immediate environment.

8. If any "avoid" objects are detected within the path or close proximity, reroute the path to maintain a safe distance.

9. Move 1 meter in the designated direction (north, south, east, or west) following the grid pattern, ensuring not to cross the plot bounds.

10. Continue the loop until the entire plot within the bounds has been covered in a 1mx1m grid pattern.

11. If at any point an "avoid" landmark or object is not identifiable in the immediate environment, pause the task and alert the user saying, "I can't find {landmark}, where should I look?"

12. After the entire plot has been covered, update the system memory with the list of all planted locations for future reference and notify the user that the task has been completed. 

Note: If during the task the robot gets outside the plot bounds, it should reposition itself within the bounds following the shortest path and continue with the planting task.
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
That'll do pig that'll do
verifying the policy; this is the llm result: Based on the information provided, it is not clear whether the user approves of the policy or suggests any changes. More context or detail is needed to accurately answer this question.
Updating feedback!
feedback:  That'll do pig that'll do
building policy...
{'avoid': 'planted areas, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
