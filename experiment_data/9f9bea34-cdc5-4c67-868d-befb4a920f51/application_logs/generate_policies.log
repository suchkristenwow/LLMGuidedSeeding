initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/9f9bea34-cdc5-4c67-868d-befb4a920f51/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted_area", "conmods"], "seed": "True"}

results_str:  {"pattern": "grid", "pattern_offset": 1, "avoid": ["planted_area", "conmods"], "seed": "True"}
constraints: {'pattern': 'grid', 'pattern_offset': 1, 'avoid': ['planted_area', 'conmods'], 'seed': True} 

building policy...
feedback is none!
Policy:  1. Check the robot's current position using lidar-inertial odometry and GPS.
2. If the robot is outside the plot bounds, calculate the shortest route inside the bounds using the plot_bounds np array.
3. Once inside the bounds, start the task by defining the grid pattern for planting seeds with an offset of 1 meter as per the constraint dictionary.
4. Begin scanning the environment for the objects mentioned in the 'avoid' list - 'planted_area' and 'conmods' using the RGB cameras.
5. Avoid these areas while planning the route for seed planting. 
6. Start the grid movement, stop at every grid point which is 1 meter apart from each other.
7. At each stop, perform a check again to ensure that it's not a 'planted_area' or 'conmods'.
8. If the location is safe, plant a seed at the current location and add this location to the 'planted_area' list in the system memory.
9. Repeat steps 6-8 until the entire plot is covered as per the grid pattern.
10. In the event of not being able to avoid an object from the 'avoid' list, inform the user with the message "I can't find a path around {object}, what should I do?".
11. If there are any discrepancies or malfunctions, stop the operation and inform the user immediately.
12. Upon completion of the task, inform the user and provide a list of all the planted locations.
enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
That'll do pig that'll do
verifying the policy; this is the llm result: The feedback provided doesn't indicate any approval or disapproval of the policy, nor does it suggest any changes. Therefore, based on the provided instructions, there's not enough information to determine the user's opinion.
Updating feedback!
feedback:  That'll do pig that'll do
building policy...
{'pattern': 'grid', 'pattern_offset': 1, 'avoid': ['planted_area', 'conmods'], 'seed': True}
