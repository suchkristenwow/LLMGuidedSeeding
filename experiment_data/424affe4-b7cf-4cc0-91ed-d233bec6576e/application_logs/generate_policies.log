initting the Policy Generator with these arguments: 
Namespace(config_path='/home/miles/projects/LLMGuidedSeeding/configs/example_config.toml', logging_dir='/home/miles/projects/LLMGuidedSeeding/experiment_data/424affe4-b7cf-4cc0-91ed-d233bec6576e/policy_generation_logs', plot_bounds_path='/home/miles/projects/LLMGuidedSeeding/random_path.csv', prompt_path='/home/miles/projects/LLMGuidedSeeding/prompts/ex_query.txt')

parsing prompt to get constraints ...
Enhanced Query: You are guiding an autonomous robotic agent to execute the prompt given below. The robot is supposed to help ecologists with tasks related to revegetation of degraded 
rangelands.

The robot is able to observe landmarks via RGB cameras and it is able to plant seeds. 

Given the following prompt, identify any relevant constraints or goal landmarks in the form of a dictionary so that I can write a policy to execute the desired task. 

The keys to this dictionary should be the strings "avoid","goal_lms","pattern","landmark_offset","search", "seed", and "pattern_offset". Here, seed is a string of a boolean variable 
which is true if the robot should plant in the specified pattern. 

For example, if the prompt was: "Plant 10 cm away from any shrubs in the plot", return {"goal_lms":"shrub","landmark_offset":0.1,"seed":"True"}. Or, if the prompt was 
"Seed along the fenceline in a straight row, 15 cm apart", return {"goal_lms":"fence","pattern_offset":0.15,"pattern":"line","seed":"True"}. 
Finally, the prompt: "Count how many shrubs are in the plot." would return {"search":"shrubs","seed":"False"}.

If you're not sure how to format the constraints into this dictionary format, return a question in the form of a string that would help allow you to parse the prompt 
into the dictionary format. An example of a follow-up question could be "I'm sorry, I'm not sure how to parse your prompt. Currently, I want to format the constraints of 
your prompt into a dictionary with the keys: "avoid","goal_lms","pattern","landmark_offset","search", and "pattern_offset". Do you think your prompt constraints can be categorized 
like this or should I edit my constraint dictionary format?"

Prompt: Plant in 1mx1m grid in the bounded area. Avoid driving over wherever youâ€™ve planted or any conmods.


llm_result: {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}

results_str:  {"avoid":"planted area, conmods","pattern":"grid","pattern_offset":1,"seed":"True"}
constraints:  {'avoid': 'planted area, conmods', 'pattern': 'grid', 'pattern_offset': 1, 'seed': True}
building policy...
feedback is none!
Policy:  1. First, check if the robot is located within the operational bounds described by the variable "plot_bounds". If the robot is outside the bounds, plan the shortest route to the nearest point within the bounds.

2. Once inside the operational area, start with the initial point for planting. Consider this as the starting point of the 1mx1m grid defined in the "pattern" and "pattern_offset" parameters.

3. Check if the robot has seeds available for planting. If not, notify the user "I have run out of seeds, please refill." and wait for user input to continue.

4. If seeds are available, proceed to plant the seed at the initial point and register this location in the system memory as a planted location.

5. After planting, plan the route to the next point in the grid, which should be 1m apart in the straight line.

6. While planning the route to the next point, avoid all the areas already planted and any conmods identified in the environment, as specified in the 'avoid' parameter. Utilize the robot's RGB cameras, lidar-inertial odometry, and GPS to ensure this.

7. Repeat steps 3 to 6 until all points in the grid within the bounded area are covered. If there are any obstacles in the path, reroute and continue with the process.

8. If the robot encounters a landmark that it cannot identify or locate, ask the user for assistance by stating, "I can't find {landmark}, where should I look?"

9. Once all the points in the grid within the bounded area have been covered, confirm the completion of the task to the user, "Task completed, all seeds in the 1mx1m grid within the plot have been planted."

10. Maintain the list of all the planted locations in the system memory for future reference or to share with the user if requested.

Remember to ensure that the robot stays within the bounds of the operation area throughout the task.
Question:  I believe this policy should complete the desired task. What do you think?
1. First, check if the robot is located within the operational bounds described by the variable "plot_bounds". If the robot is outside the bounds, plan the shortest route to the nearest point within the bounds.

2. Once inside the operational area, start with the initial point for planting. Consider this as the starting point of the 1mx1m grid defined in the "pattern" and "pattern_offset" parameters.

3. Check if the robot has seeds available for planting. If not, notify the user "I have run out of seeds, please refill." and wait for user input to continue.

4. If seeds are available, proceed to plant the seed at the initial point and register this location in the system memory as a planted location.

5. After planting, plan the route to the next point in the grid, which should be 1m apart in the straight line.

6. While planning the route to the next point, avoid all the areas already planted and any conmods identified in the environment, as specified in the 'avoid' parameter. Utilize the robot's RGB cameras, lidar-inertial odometry, and GPS to ensure this.

7. Repeat steps 3 to 6 until all points in the grid within the bounded area are covered. If there are any obstacles in the path, reroute and continue with the process.

8. If the robot encounters a landmark that it cannot identify or locate, ask the user for assistance by stating, "I can't find {landmark}, where should I look?"

9. Once all the points in the grid within the bounded area have been covered, confirm the completion of the task to the user, "Task completed, all seeds in the 1mx1m grid within the plot have been planted."

10. Maintain the list of all the planted locations in the system memory for future reference or to share with the user if requested.

Remember to ensure that the robot stays within the bounds of the operation area throughout the task.
Feedback: enhanced verification response:  The following paragraph is feedback from the user on a policy. Based on the following response, does the user approve of this policy? Return "True" if so, and "False" otherwise.
If the user suggests any changes, return False. 
I have no feedback
verifying the policy; this is the llm result: True
Found a valid policy approved by the human!
